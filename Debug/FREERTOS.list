
C:\Users\Murat\Documents\STM\FREERTOS\Debug\FREERTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002138  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080022d8  080022d8  000122d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002350  08002350  00012350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002354  08002354  00012354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08002358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003e10  20000008  08002360  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20003e18  08002360  00023e18  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001df74  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003ee4  00000000  00000000  0003dfac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008dbb  00000000  00000000  00041e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d90  00000000  00000000  0004ac50  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000010d0  00000000  00000000  0004b9e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008e93  00000000  00000000  0004cab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000056c5  00000000  00000000  00055943  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005b008  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000025f8  00000000  00000000  0005b084  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000008 	.word	0x20000008
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080022c0 	.word	0x080022c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	080022c0 	.word	0x080022c0

080001e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001e0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001e2:	4b0b      	ldr	r3, [pc, #44]	; (8000210 <HAL_Init+0x30>)
 80001e4:	681a      	ldr	r2, [r3, #0]
 80001e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80001ea:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80001ec:	681a      	ldr	r2, [r3, #0]
 80001ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80001f2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f4:	681a      	ldr	r2, [r3, #0]
 80001f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80001fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001fc:	2003      	movs	r0, #3
 80001fe:	f000 f817 	bl	8000230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000202:	2000      	movs	r0, #0
 8000204:	f001 ff56 	bl	80020b4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000208:	f001 ff24 	bl	8002054 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 800020c:	2000      	movs	r0, #0
 800020e:	bd08      	pop	{r3, pc}
 8000210:	40023c00 	.word	0x40023c00

08000214 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000214:	4a02      	ldr	r2, [pc, #8]	; (8000220 <HAL_IncTick+0xc>)
 8000216:	6813      	ldr	r3, [r2, #0]
 8000218:	3301      	adds	r3, #1
 800021a:	6013      	str	r3, [r2, #0]
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	20003d70 	.word	0x20003d70

08000224 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000224:	4b01      	ldr	r3, [pc, #4]	; (800022c <HAL_GetTick+0x8>)
 8000226:	6818      	ldr	r0, [r3, #0]
}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	20003d70 	.word	0x20003d70

08000230 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000230:	4a07      	ldr	r2, [pc, #28]	; (8000250 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000232:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000234:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000238:	041b      	lsls	r3, r3, #16
 800023a:	0c1b      	lsrs	r3, r3, #16
 800023c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000240:	0200      	lsls	r0, r0, #8
 8000242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000246:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800024a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800024c:	60d3      	str	r3, [r2, #12]
 800024e:	4770      	bx	lr
 8000250:	e000ed00 	.word	0xe000ed00

08000254 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000254:	4b17      	ldr	r3, [pc, #92]	; (80002b4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000256:	b530      	push	{r4, r5, lr}
 8000258:	68dc      	ldr	r4, [r3, #12]
 800025a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800025e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000262:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000264:	2b04      	cmp	r3, #4
 8000266:	bf28      	it	cs
 8000268:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800026a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026c:	f04f 0501 	mov.w	r5, #1
 8000270:	fa05 f303 	lsl.w	r3, r5, r3
 8000274:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000278:	bf8c      	ite	hi
 800027a:	3c03      	subhi	r4, #3
 800027c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800027e:	4019      	ands	r1, r3
 8000280:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000282:	fa05 f404 	lsl.w	r4, r5, r4
 8000286:	3c01      	subs	r4, #1
 8000288:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800028a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800028c:	ea42 0201 	orr.w	r2, r2, r1
 8000290:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	bfaf      	iteee	ge
 8000296:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029a:	f000 000f 	andlt.w	r0, r0, #15
 800029e:	4b06      	ldrlt	r3, [pc, #24]	; (80002b8 <HAL_NVIC_SetPriority+0x64>)
 80002a0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a2:	bfa5      	ittet	ge
 80002a4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002a8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002aa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ac:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002b0:	bd30      	pop	{r4, r5, pc}
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00
 80002b8:	e000ed14 	.word	0xe000ed14

080002bc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002bc:	0942      	lsrs	r2, r0, #5
 80002be:	2301      	movs	r3, #1
 80002c0:	f000 001f 	and.w	r0, r0, #31
 80002c4:	fa03 f000 	lsl.w	r0, r3, r0
 80002c8:	4b01      	ldr	r3, [pc, #4]	; (80002d0 <HAL_NVIC_EnableIRQ+0x14>)
 80002ca:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002ce:	4770      	bx	lr
 80002d0:	e000e100 	.word	0xe000e100

080002d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002d4:	3801      	subs	r0, #1
 80002d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002da:	d20a      	bcs.n	80002f2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002dc:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002de:	4a07      	ldr	r2, [pc, #28]	; (80002fc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002e0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e2:	21f0      	movs	r1, #240	; 0xf0
 80002e4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002e8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ea:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002ec:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002f2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e010 	.word	0xe000e010
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000300:	4b04      	ldr	r3, [pc, #16]	; (8000314 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000302:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000304:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000306:	bf0c      	ite	eq
 8000308:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800030c:	f022 0204 	bicne.w	r2, r2, #4
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	4770      	bx	lr
 8000314:	e000e010 	.word	0xe000e010

08000318 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800031c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800031e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000320:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80004c0 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000324:	4a64      	ldr	r2, [pc, #400]	; (80004b8 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000326:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000328:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 800032c:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800032e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000330:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000334:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8000338:	42b7      	cmp	r7, r6
 800033a:	f040 80ad 	bne.w	8000498 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800033e:	684c      	ldr	r4, [r1, #4]
 8000340:	f024 0a10 	bic.w	sl, r4, #16
 8000344:	f1ba 0f02 	cmp.w	sl, #2
 8000348:	d116      	bne.n	8000378 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 800034a:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800034e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000352:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000356:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800035a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800035e:	f04f 0e0f 	mov.w	lr, #15
 8000362:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000366:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800036a:	690d      	ldr	r5, [r1, #16]
 800036c:	fa05 f50b 	lsl.w	r5, r5, fp
 8000370:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000374:	f8cc 5020 	str.w	r5, [ip, #32]
 8000378:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800037c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800037e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000382:	fa05 f50c 	lsl.w	r5, r5, ip
 8000386:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000388:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800038c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000390:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000394:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000398:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800039c:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003a0:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 80003a2:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003a6:	d815      	bhi.n	80003d4 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 80003a8:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003ac:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003b0:	68cd      	ldr	r5, [r1, #12]
 80003b2:	fa05 fa0c 	lsl.w	sl, r5, ip
 80003b6:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 80003ba:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80003be:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003c2:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003c6:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80003ca:	fa0e fe03 	lsl.w	lr, lr, r3
 80003ce:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80003d2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80003d4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003d6:	9d00      	ldr	r5, [sp, #0]
 80003d8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80003da:	688f      	ldr	r7, [r1, #8]
 80003dc:	fa07 f70c 	lsl.w	r7, r7, ip
 80003e0:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80003e2:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003e4:	00e5      	lsls	r5, r4, #3
 80003e6:	d557      	bpl.n	8000498 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003e8:	f04f 0b00 	mov.w	fp, #0
 80003ec:	f8cd b00c 	str.w	fp, [sp, #12]
 80003f0:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003f4:	4d31      	ldr	r5, [pc, #196]	; (80004bc <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f6:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80003fa:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80003fe:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000402:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000406:	9703      	str	r7, [sp, #12]
 8000408:	9f03      	ldr	r7, [sp, #12]
 800040a:	f023 0703 	bic.w	r7, r3, #3
 800040e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000412:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000416:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800041a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800041e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000422:	f04f 0e0f 	mov.w	lr, #15
 8000426:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800042a:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800042c:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000430:	d039      	beq.n	80004a6 <HAL_GPIO_Init+0x18e>
 8000432:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000436:	42a8      	cmp	r0, r5
 8000438:	d037      	beq.n	80004aa <HAL_GPIO_Init+0x192>
 800043a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800043e:	42a8      	cmp	r0, r5
 8000440:	d035      	beq.n	80004ae <HAL_GPIO_Init+0x196>
 8000442:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000446:	42a8      	cmp	r0, r5
 8000448:	d033      	beq.n	80004b2 <HAL_GPIO_Init+0x19a>
 800044a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800044e:	42a8      	cmp	r0, r5
 8000450:	bf14      	ite	ne
 8000452:	2507      	movne	r5, #7
 8000454:	2504      	moveq	r5, #4
 8000456:	fa05 f50c 	lsl.w	r5, r5, ip
 800045a:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800045e:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000460:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000462:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000464:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000468:	bf0c      	ite	eq
 800046a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800046c:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800046e:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000470:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000472:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000476:	bf0c      	ite	eq
 8000478:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800047a:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800047c:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800047e:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000480:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000484:	bf0c      	ite	eq
 8000486:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000488:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800048a:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800048c:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800048e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000490:	bf54      	ite	pl
 8000492:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000494:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000496:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000498:	3301      	adds	r3, #1
 800049a:	2b10      	cmp	r3, #16
 800049c:	f47f af47 	bne.w	800032e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80004a0:	b005      	add	sp, #20
 80004a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004a6:	465d      	mov	r5, fp
 80004a8:	e7d5      	b.n	8000456 <HAL_GPIO_Init+0x13e>
 80004aa:	2501      	movs	r5, #1
 80004ac:	e7d3      	b.n	8000456 <HAL_GPIO_Init+0x13e>
 80004ae:	2502      	movs	r5, #2
 80004b0:	e7d1      	b.n	8000456 <HAL_GPIO_Init+0x13e>
 80004b2:	2503      	movs	r5, #3
 80004b4:	e7cf      	b.n	8000456 <HAL_GPIO_Init+0x13e>
 80004b6:	bf00      	nop
 80004b8:	40013c00 	.word	0x40013c00
 80004bc:	40020000 	.word	0x40020000
 80004c0:	40023800 	.word	0x40023800

080004c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004c4:	b10a      	cbz	r2, 80004ca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80004c6:	6181      	str	r1, [r0, #24]
 80004c8:	4770      	bx	lr
 80004ca:	0409      	lsls	r1, r1, #16
 80004cc:	e7fb      	b.n	80004c6 <HAL_GPIO_WritePin+0x2>

080004ce <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004ce:	4770      	bx	lr

080004d0 <HAL_GPIO_EXTI_IRQHandler>:
{
 80004d0:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80004d2:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80004d4:	6959      	ldr	r1, [r3, #20]
 80004d6:	4201      	tst	r1, r0
 80004d8:	d002      	beq.n	80004e0 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80004da:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80004dc:	f7ff fff7 	bl	80004ce <HAL_GPIO_EXTI_Callback>
 80004e0:	bd08      	pop	{r3, pc}
 80004e2:	bf00      	nop
 80004e4:	40013c00 	.word	0x40013c00

080004e8 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004e8:	6803      	ldr	r3, [r0, #0]
{
 80004ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80004ec:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004ee:	07d8      	lsls	r0, r3, #31
 80004f0:	d43b      	bmi.n	800056a <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004f2:	6823      	ldr	r3, [r4, #0]
 80004f4:	0799      	lsls	r1, r3, #30
 80004f6:	f100 8086 	bmi.w	8000606 <HAL_RCC_OscConfig+0x11e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004fa:	6823      	ldr	r3, [r4, #0]
 80004fc:	071e      	lsls	r6, r3, #28
 80004fe:	f100 80d1 	bmi.w	80006a4 <HAL_RCC_OscConfig+0x1bc>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000502:	6823      	ldr	r3, [r4, #0]
 8000504:	075d      	lsls	r5, r3, #29
 8000506:	d52a      	bpl.n	800055e <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000508:	2300      	movs	r3, #0
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	4b8e      	ldr	r3, [pc, #568]	; (8000748 <HAL_RCC_OscConfig+0x260>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800050e:	4d8f      	ldr	r5, [pc, #572]	; (800074c <HAL_RCC_OscConfig+0x264>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000512:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000516:	641a      	str	r2, [r3, #64]	; 0x40
 8000518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8000522:	682b      	ldr	r3, [r5, #0]
 8000524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000528:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 800052a:	f7ff fe7b 	bl	8000224 <HAL_GetTick>
 800052e:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000530:	682b      	ldr	r3, [r5, #0]
 8000532:	05da      	lsls	r2, r3, #23
 8000534:	f140 80d8 	bpl.w	80006e8 <HAL_RCC_OscConfig+0x200>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000538:	68a3      	ldr	r3, [r4, #8]
 800053a:	4d83      	ldr	r5, [pc, #524]	; (8000748 <HAL_RCC_OscConfig+0x260>)
 800053c:	2b01      	cmp	r3, #1
 800053e:	f040 80da 	bne.w	80006f6 <HAL_RCC_OscConfig+0x20e>
 8000542:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800054a:	f7ff fe6b 	bl	8000224 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800054e:	4d7e      	ldr	r5, [pc, #504]	; (8000748 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8000550:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000552:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000556:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000558:	079b      	lsls	r3, r3, #30
 800055a:	f140 80ed 	bpl.w	8000738 <HAL_RCC_OscConfig+0x250>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800055e:	69a2      	ldr	r2, [r4, #24]
 8000560:	2a00      	cmp	r2, #0
 8000562:	f040 80f9 	bne.w	8000758 <HAL_RCC_OscConfig+0x270>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000566:	2000      	movs	r0, #0
 8000568:	e015      	b.n	8000596 <HAL_RCC_OscConfig+0xae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800056a:	4b77      	ldr	r3, [pc, #476]	; (8000748 <HAL_RCC_OscConfig+0x260>)
 800056c:	689a      	ldr	r2, [r3, #8]
 800056e:	f002 020c 	and.w	r2, r2, #12
 8000572:	2a04      	cmp	r2, #4
 8000574:	d007      	beq.n	8000586 <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000576:	689a      	ldr	r2, [r3, #8]
 8000578:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800057c:	2a08      	cmp	r2, #8
 800057e:	d10c      	bne.n	800059a <HAL_RCC_OscConfig+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	025a      	lsls	r2, r3, #9
 8000584:	d509      	bpl.n	800059a <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000586:	4b70      	ldr	r3, [pc, #448]	; (8000748 <HAL_RCC_OscConfig+0x260>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	039b      	lsls	r3, r3, #14
 800058c:	d5b1      	bpl.n	80004f2 <HAL_RCC_OscConfig+0xa>
 800058e:	6863      	ldr	r3, [r4, #4]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d1ae      	bne.n	80004f2 <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 8000594:	2001      	movs	r0, #1
}
 8000596:	b003      	add	sp, #12
 8000598:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800059a:	6863      	ldr	r3, [r4, #4]
 800059c:	4d6a      	ldr	r5, [pc, #424]	; (8000748 <HAL_RCC_OscConfig+0x260>)
 800059e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005a2:	d111      	bne.n	80005c8 <HAL_RCC_OscConfig+0xe0>
 80005a4:	682b      	ldr	r3, [r5, #0]
 80005a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005aa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80005ac:	f7ff fe3a 	bl	8000224 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005b0:	4d65      	ldr	r5, [pc, #404]	; (8000748 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80005b2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005b4:	682b      	ldr	r3, [r5, #0]
 80005b6:	039f      	lsls	r7, r3, #14
 80005b8:	d49b      	bmi.n	80004f2 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005ba:	f7ff fe33 	bl	8000224 <HAL_GetTick>
 80005be:	1b80      	subs	r0, r0, r6
 80005c0:	2864      	cmp	r0, #100	; 0x64
 80005c2:	d9f7      	bls.n	80005b4 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 80005c4:	2003      	movs	r0, #3
 80005c6:	e7e6      	b.n	8000596 <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80005cc:	d104      	bne.n	80005d8 <HAL_RCC_OscConfig+0xf0>
 80005ce:	682b      	ldr	r3, [r5, #0]
 80005d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005d4:	602b      	str	r3, [r5, #0]
 80005d6:	e7e5      	b.n	80005a4 <HAL_RCC_OscConfig+0xbc>
 80005d8:	682a      	ldr	r2, [r5, #0]
 80005da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005de:	602a      	str	r2, [r5, #0]
 80005e0:	682a      	ldr	r2, [r5, #0]
 80005e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005e6:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d1df      	bne.n	80005ac <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 80005ec:	f7ff fe1a 	bl	8000224 <HAL_GetTick>
 80005f0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005f2:	682b      	ldr	r3, [r5, #0]
 80005f4:	0398      	lsls	r0, r3, #14
 80005f6:	f57f af7c 	bpl.w	80004f2 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005fa:	f7ff fe13 	bl	8000224 <HAL_GetTick>
 80005fe:	1b80      	subs	r0, r0, r6
 8000600:	2864      	cmp	r0, #100	; 0x64
 8000602:	d9f6      	bls.n	80005f2 <HAL_RCC_OscConfig+0x10a>
 8000604:	e7de      	b.n	80005c4 <HAL_RCC_OscConfig+0xdc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000606:	4b50      	ldr	r3, [pc, #320]	; (8000748 <HAL_RCC_OscConfig+0x260>)
 8000608:	689a      	ldr	r2, [r3, #8]
 800060a:	f012 0f0c 	tst.w	r2, #12
 800060e:	d007      	beq.n	8000620 <HAL_RCC_OscConfig+0x138>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000610:	689a      	ldr	r2, [r3, #8]
 8000612:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000616:	2a08      	cmp	r2, #8
 8000618:	d116      	bne.n	8000648 <HAL_RCC_OscConfig+0x160>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	0259      	lsls	r1, r3, #9
 800061e:	d413      	bmi.n	8000648 <HAL_RCC_OscConfig+0x160>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000620:	4b49      	ldr	r3, [pc, #292]	; (8000748 <HAL_RCC_OscConfig+0x260>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	0792      	lsls	r2, r2, #30
 8000626:	d502      	bpl.n	800062e <HAL_RCC_OscConfig+0x146>
 8000628:	68e2      	ldr	r2, [r4, #12]
 800062a:	2a01      	cmp	r2, #1
 800062c:	d1b2      	bne.n	8000594 <HAL_RCC_OscConfig+0xac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800062e:	6818      	ldr	r0, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000630:	22f8      	movs	r2, #248	; 0xf8
 8000632:	fa92 f2a2 	rbit	r2, r2
 8000636:	fab2 f182 	clz	r1, r2
 800063a:	6922      	ldr	r2, [r4, #16]
 800063c:	408a      	lsls	r2, r1
 800063e:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 8000642:	430a      	orrs	r2, r1
 8000644:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000646:	e758      	b.n	80004fa <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000648:	68e2      	ldr	r2, [r4, #12]
 800064a:	4b41      	ldr	r3, [pc, #260]	; (8000750 <HAL_RCC_OscConfig+0x268>)
 800064c:	b1da      	cbz	r2, 8000686 <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_ENABLE();
 800064e:	2201      	movs	r2, #1
 8000650:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000652:	f7ff fde7 	bl	8000224 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000656:	4d3c      	ldr	r5, [pc, #240]	; (8000748 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8000658:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800065a:	682b      	ldr	r3, [r5, #0]
 800065c:	079b      	lsls	r3, r3, #30
 800065e:	d50c      	bpl.n	800067a <HAL_RCC_OscConfig+0x192>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000660:	6829      	ldr	r1, [r5, #0]
 8000662:	23f8      	movs	r3, #248	; 0xf8
 8000664:	fa93 f3a3 	rbit	r3, r3
 8000668:	fab3 f283 	clz	r2, r3
 800066c:	6923      	ldr	r3, [r4, #16]
 800066e:	4093      	lsls	r3, r2
 8000670:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000674:	4313      	orrs	r3, r2
 8000676:	602b      	str	r3, [r5, #0]
 8000678:	e73f      	b.n	80004fa <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800067a:	f7ff fdd3 	bl	8000224 <HAL_GetTick>
 800067e:	1b80      	subs	r0, r0, r6
 8000680:	2802      	cmp	r0, #2
 8000682:	d9ea      	bls.n	800065a <HAL_RCC_OscConfig+0x172>
 8000684:	e79e      	b.n	80005c4 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 8000686:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000688:	f7ff fdcc 	bl	8000224 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800068c:	4d2e      	ldr	r5, [pc, #184]	; (8000748 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 800068e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000690:	682b      	ldr	r3, [r5, #0]
 8000692:	079f      	lsls	r7, r3, #30
 8000694:	f57f af31 	bpl.w	80004fa <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000698:	f7ff fdc4 	bl	8000224 <HAL_GetTick>
 800069c:	1b80      	subs	r0, r0, r6
 800069e:	2802      	cmp	r0, #2
 80006a0:	d9f6      	bls.n	8000690 <HAL_RCC_OscConfig+0x1a8>
 80006a2:	e78f      	b.n	80005c4 <HAL_RCC_OscConfig+0xdc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80006a4:	6962      	ldr	r2, [r4, #20]
 80006a6:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <HAL_RCC_OscConfig+0x26c>)
 80006a8:	b17a      	cbz	r2, 80006ca <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 80006aa:	2201      	movs	r2, #1
 80006ac:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006ae:	f7ff fdb9 	bl	8000224 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006b2:	4d25      	ldr	r5, [pc, #148]	; (8000748 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 80006b4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006b6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80006b8:	0798      	lsls	r0, r3, #30
 80006ba:	f53f af22 	bmi.w	8000502 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006be:	f7ff fdb1 	bl	8000224 <HAL_GetTick>
 80006c2:	1b80      	subs	r0, r0, r6
 80006c4:	2802      	cmp	r0, #2
 80006c6:	d9f6      	bls.n	80006b6 <HAL_RCC_OscConfig+0x1ce>
 80006c8:	e77c      	b.n	80005c4 <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_LSI_DISABLE();
 80006ca:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006cc:	f7ff fdaa 	bl	8000224 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006d0:	4d1d      	ldr	r5, [pc, #116]	; (8000748 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 80006d2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006d4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80006d6:	0799      	lsls	r1, r3, #30
 80006d8:	f57f af13 	bpl.w	8000502 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006dc:	f7ff fda2 	bl	8000224 <HAL_GetTick>
 80006e0:	1b80      	subs	r0, r0, r6
 80006e2:	2802      	cmp	r0, #2
 80006e4:	d9f6      	bls.n	80006d4 <HAL_RCC_OscConfig+0x1ec>
 80006e6:	e76d      	b.n	80005c4 <HAL_RCC_OscConfig+0xdc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80006e8:	f7ff fd9c 	bl	8000224 <HAL_GetTick>
 80006ec:	1b80      	subs	r0, r0, r6
 80006ee:	2802      	cmp	r0, #2
 80006f0:	f67f af1e 	bls.w	8000530 <HAL_RCC_OscConfig+0x48>
 80006f4:	e766      	b.n	80005c4 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006f6:	2b05      	cmp	r3, #5
 80006f8:	d104      	bne.n	8000704 <HAL_RCC_OscConfig+0x21c>
 80006fa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	672b      	str	r3, [r5, #112]	; 0x70
 8000702:	e71e      	b.n	8000542 <HAL_RCC_OscConfig+0x5a>
 8000704:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000706:	f022 0201 	bic.w	r2, r2, #1
 800070a:	672a      	str	r2, [r5, #112]	; 0x70
 800070c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800070e:	f022 0204 	bic.w	r2, r2, #4
 8000712:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000714:	2b00      	cmp	r3, #0
 8000716:	f47f af18 	bne.w	800054a <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 800071a:	f7ff fd83 	bl	8000224 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800071e:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000722:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000724:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000726:	0798      	lsls	r0, r3, #30
 8000728:	f57f af19 	bpl.w	800055e <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800072c:	f7ff fd7a 	bl	8000224 <HAL_GetTick>
 8000730:	1b80      	subs	r0, r0, r6
 8000732:	42b8      	cmp	r0, r7
 8000734:	d9f6      	bls.n	8000724 <HAL_RCC_OscConfig+0x23c>
 8000736:	e745      	b.n	80005c4 <HAL_RCC_OscConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000738:	f7ff fd74 	bl	8000224 <HAL_GetTick>
 800073c:	1b80      	subs	r0, r0, r6
 800073e:	42b8      	cmp	r0, r7
 8000740:	f67f af09 	bls.w	8000556 <HAL_RCC_OscConfig+0x6e>
 8000744:	e73e      	b.n	80005c4 <HAL_RCC_OscConfig+0xdc>
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000
 8000750:	42470000 	.word	0x42470000
 8000754:	42470e80 	.word	0x42470e80
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000758:	4d2b      	ldr	r5, [pc, #172]	; (8000808 <HAL_RCC_OscConfig+0x320>)
 800075a:	68ab      	ldr	r3, [r5, #8]
 800075c:	f003 030c 	and.w	r3, r3, #12
 8000760:	2b08      	cmp	r3, #8
 8000762:	f43f af17 	beq.w	8000594 <HAL_RCC_OscConfig+0xac>
 8000766:	4e29      	ldr	r6, [pc, #164]	; (800080c <HAL_RCC_OscConfig+0x324>)
 8000768:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800076a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800076c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800076e:	d13e      	bne.n	80007ee <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 8000770:	f7ff fd58 	bl	8000224 <HAL_GetTick>
 8000774:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000776:	682b      	ldr	r3, [r5, #0]
 8000778:	0199      	lsls	r1, r3, #6
 800077a:	d432      	bmi.n	80007e2 <HAL_RCC_OscConfig+0x2fa>
 800077c:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8000780:	fa97 f7a7 	rbit	r7, r7
 8000784:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000788:	fab7 f787 	clz	r7, r7
 800078c:	fa92 f2a2 	rbit	r2, r2
 8000790:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000794:	fab2 f082 	clz	r0, r2
 8000798:	fa91 f1a1 	rbit	r1, r1
 800079c:	6a22      	ldr	r2, [r4, #32]
 800079e:	69e3      	ldr	r3, [r4, #28]
 80007a0:	4313      	orrs	r3, r2
 80007a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007a4:	fa02 f707 	lsl.w	r7, r2, r7
 80007a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80007aa:	0852      	lsrs	r2, r2, #1
 80007ac:	3a01      	subs	r2, #1
 80007ae:	4082      	lsls	r2, r0
 80007b0:	433b      	orrs	r3, r7
 80007b2:	4313      	orrs	r3, r2
 80007b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80007b6:	4c14      	ldr	r4, [pc, #80]	; (8000808 <HAL_RCC_OscConfig+0x320>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80007b8:	fab1 f181 	clz	r1, r1
 80007bc:	fa02 f101 	lsl.w	r1, r2, r1
 80007c0:	430b      	orrs	r3, r1
 80007c2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80007c4:	2301      	movs	r3, #1
 80007c6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80007c8:	f7ff fd2c 	bl	8000224 <HAL_GetTick>
 80007cc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80007ce:	6823      	ldr	r3, [r4, #0]
 80007d0:	019a      	lsls	r2, r3, #6
 80007d2:	f53f aec8 	bmi.w	8000566 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007d6:	f7ff fd25 	bl	8000224 <HAL_GetTick>
 80007da:	1b40      	subs	r0, r0, r5
 80007dc:	2802      	cmp	r0, #2
 80007de:	d9f6      	bls.n	80007ce <HAL_RCC_OscConfig+0x2e6>
 80007e0:	e6f0      	b.n	80005c4 <HAL_RCC_OscConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007e2:	f7ff fd1f 	bl	8000224 <HAL_GetTick>
 80007e6:	1bc0      	subs	r0, r0, r7
 80007e8:	2802      	cmp	r0, #2
 80007ea:	d9c4      	bls.n	8000776 <HAL_RCC_OscConfig+0x28e>
 80007ec:	e6ea      	b.n	80005c4 <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 80007ee:	f7ff fd19 	bl	8000224 <HAL_GetTick>
 80007f2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80007f4:	682b      	ldr	r3, [r5, #0]
 80007f6:	019b      	lsls	r3, r3, #6
 80007f8:	f57f aeb5 	bpl.w	8000566 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007fc:	f7ff fd12 	bl	8000224 <HAL_GetTick>
 8000800:	1b00      	subs	r0, r0, r4
 8000802:	2802      	cmp	r0, #2
 8000804:	d9f6      	bls.n	80007f4 <HAL_RCC_OscConfig+0x30c>
 8000806:	e6dd      	b.n	80005c4 <HAL_RCC_OscConfig+0xdc>
 8000808:	40023800 	.word	0x40023800
 800080c:	42470060 	.word	0x42470060

08000810 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000810:	4a19      	ldr	r2, [pc, #100]	; (8000878 <HAL_RCC_GetSysClockFreq+0x68>)
 8000812:	6893      	ldr	r3, [r2, #8]
 8000814:	f003 030c 	and.w	r3, r3, #12
 8000818:	2b04      	cmp	r3, #4
{
 800081a:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800081c:	d003      	beq.n	8000826 <HAL_RCC_GetSysClockFreq+0x16>
 800081e:	2b08      	cmp	r3, #8
 8000820:	d003      	beq.n	800082a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000822:	4816      	ldr	r0, [pc, #88]	; (800087c <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000824:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000826:	4816      	ldr	r0, [pc, #88]	; (8000880 <HAL_RCC_GetSysClockFreq+0x70>)
 8000828:	bd10      	pop	{r4, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800082a:	6851      	ldr	r1, [r2, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800082c:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800082e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000832:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000836:	f647 74c0 	movw	r4, #32704	; 0x7fc0
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800083a:	6853      	ldr	r3, [r2, #4]
 800083c:	fa94 f0a4 	rbit	r0, r4
 8000840:	fab0 f080 	clz	r0, r0
 8000844:	ea03 0304 	and.w	r3, r3, r4
 8000848:	fa23 f300 	lsr.w	r3, r3, r0
 800084c:	bf14      	ite	ne
 800084e:	480c      	ldrne	r0, [pc, #48]	; (8000880 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000850:	480a      	ldreq	r0, [pc, #40]	; (800087c <HAL_RCC_GetSysClockFreq+0x6c>)
 8000852:	fbb0 f0f1 	udiv	r0, r0, r1
 8000856:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <HAL_RCC_GetSysClockFreq+0x68>)
 800085a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	fa92 f2a2 	rbit	r2, r2
 8000864:	fab2 f282 	clz	r2, r2
 8000868:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800086c:	40d3      	lsrs	r3, r2
 800086e:	3301      	adds	r3, #1
 8000870:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000872:	fbb0 f0f3 	udiv	r0, r0, r3
 8000876:	bd10      	pop	{r4, pc}
 8000878:	40023800 	.word	0x40023800
 800087c:	00f42400 	.word	0x00f42400
 8000880:	007a1200 	.word	0x007a1200

08000884 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000884:	4b56      	ldr	r3, [pc, #344]	; (80009e0 <HAL_RCC_ClockConfig+0x15c>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	f002 020f 	and.w	r2, r2, #15
 800088c:	428a      	cmp	r2, r1
{
 800088e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000892:	4605      	mov	r5, r0
 8000894:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000896:	d330      	bcc.n	80008fa <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000898:	682a      	ldr	r2, [r5, #0]
 800089a:	0794      	lsls	r4, r2, #30
 800089c:	d437      	bmi.n	800090e <HAL_RCC_ClockConfig+0x8a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800089e:	07d0      	lsls	r0, r2, #31
 80008a0:	d43d      	bmi.n	800091e <HAL_RCC_ClockConfig+0x9a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80008a2:	4b4f      	ldr	r3, [pc, #316]	; (80009e0 <HAL_RCC_ClockConfig+0x15c>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	f002 020f 	and.w	r2, r2, #15
 80008aa:	4296      	cmp	r6, r2
 80008ac:	f0c0 8088 	bcc.w	80009c0 <HAL_RCC_ClockConfig+0x13c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008b0:	682a      	ldr	r2, [r5, #0]
 80008b2:	0751      	lsls	r1, r2, #29
 80008b4:	f100 808c 	bmi.w	80009d0 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008b8:	0713      	lsls	r3, r2, #28
 80008ba:	d507      	bpl.n	80008cc <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80008bc:	4a49      	ldr	r2, [pc, #292]	; (80009e4 <HAL_RCC_ClockConfig+0x160>)
 80008be:	6929      	ldr	r1, [r5, #16]
 80008c0:	6893      	ldr	r3, [r2, #8]
 80008c2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80008c6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80008ca:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80008cc:	f7ff ffa0 	bl	8000810 <HAL_RCC_GetSysClockFreq>
 80008d0:	4b44      	ldr	r3, [pc, #272]	; (80009e4 <HAL_RCC_ClockConfig+0x160>)
 80008d2:	22f0      	movs	r2, #240	; 0xf0
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	fa92 f2a2 	rbit	r2, r2
 80008da:	fab2 f282 	clz	r2, r2
 80008de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80008e2:	40d3      	lsrs	r3, r2
 80008e4:	4a40      	ldr	r2, [pc, #256]	; (80009e8 <HAL_RCC_ClockConfig+0x164>)
 80008e6:	5cd3      	ldrb	r3, [r2, r3]
 80008e8:	40d8      	lsrs	r0, r3
 80008ea:	4b40      	ldr	r3, [pc, #256]	; (80009ec <HAL_RCC_ClockConfig+0x168>)
 80008ec:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f001 fbe0 	bl	80020b4 <HAL_InitTick>
  return HAL_OK;
 80008f4:	2000      	movs	r0, #0
}
 80008f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008fa:	b2ca      	uxtb	r2, r1
 80008fc:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f003 030f 	and.w	r3, r3, #15
 8000904:	4299      	cmp	r1, r3
 8000906:	d0c7      	beq.n	8000898 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000908:	2001      	movs	r0, #1
 800090a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800090e:	4935      	ldr	r1, [pc, #212]	; (80009e4 <HAL_RCC_ClockConfig+0x160>)
 8000910:	68a8      	ldr	r0, [r5, #8]
 8000912:	688b      	ldr	r3, [r1, #8]
 8000914:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000918:	4303      	orrs	r3, r0
 800091a:	608b      	str	r3, [r1, #8]
 800091c:	e7bf      	b.n	800089e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800091e:	686a      	ldr	r2, [r5, #4]
 8000920:	4b30      	ldr	r3, [pc, #192]	; (80009e4 <HAL_RCC_ClockConfig+0x160>)
 8000922:	2a01      	cmp	r2, #1
 8000924:	d11e      	bne.n	8000964 <HAL_RCC_ClockConfig+0xe0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800092c:	d0ec      	beq.n	8000908 <HAL_RCC_ClockConfig+0x84>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800092e:	4c2d      	ldr	r4, [pc, #180]	; (80009e4 <HAL_RCC_ClockConfig+0x160>)
 8000930:	68a3      	ldr	r3, [r4, #8]
 8000932:	f023 0303 	bic.w	r3, r3, #3
 8000936:	4313      	orrs	r3, r2
 8000938:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800093a:	f7ff fc73 	bl	8000224 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800093e:	686b      	ldr	r3, [r5, #4]
 8000940:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000942:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000944:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000948:	d116      	bne.n	8000978 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800094a:	68a3      	ldr	r3, [r4, #8]
 800094c:	f003 030c 	and.w	r3, r3, #12
 8000950:	2b04      	cmp	r3, #4
 8000952:	d0a6      	beq.n	80008a2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000954:	f7ff fc66 	bl	8000224 <HAL_GetTick>
 8000958:	1bc0      	subs	r0, r0, r7
 800095a:	4540      	cmp	r0, r8
 800095c:	d9f5      	bls.n	800094a <HAL_RCC_ClockConfig+0xc6>
          return HAL_TIMEOUT;
 800095e:	2003      	movs	r0, #3
 8000960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000964:	1e91      	subs	r1, r2, #2
 8000966:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000968:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800096a:	d802      	bhi.n	8000972 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800096c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000970:	e7dc      	b.n	800092c <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000972:	f013 0f02 	tst.w	r3, #2
 8000976:	e7d9      	b.n	800092c <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000978:	2b02      	cmp	r3, #2
 800097a:	d10a      	bne.n	8000992 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800097c:	68a3      	ldr	r3, [r4, #8]
 800097e:	f003 030c 	and.w	r3, r3, #12
 8000982:	2b08      	cmp	r3, #8
 8000984:	d08d      	beq.n	80008a2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000986:	f7ff fc4d 	bl	8000224 <HAL_GetTick>
 800098a:	1bc0      	subs	r0, r0, r7
 800098c:	4540      	cmp	r0, r8
 800098e:	d9f5      	bls.n	800097c <HAL_RCC_ClockConfig+0xf8>
 8000990:	e7e5      	b.n	800095e <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000992:	2b03      	cmp	r3, #3
 8000994:	d10f      	bne.n	80009b6 <HAL_RCC_ClockConfig+0x132>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000996:	68a3      	ldr	r3, [r4, #8]
 8000998:	f003 030c 	and.w	r3, r3, #12
 800099c:	2b0c      	cmp	r3, #12
 800099e:	d080      	beq.n	80008a2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009a0:	f7ff fc40 	bl	8000224 <HAL_GetTick>
 80009a4:	1bc0      	subs	r0, r0, r7
 80009a6:	4540      	cmp	r0, r8
 80009a8:	d9f5      	bls.n	8000996 <HAL_RCC_ClockConfig+0x112>
 80009aa:	e7d8      	b.n	800095e <HAL_RCC_ClockConfig+0xda>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009ac:	f7ff fc3a 	bl	8000224 <HAL_GetTick>
 80009b0:	1bc0      	subs	r0, r0, r7
 80009b2:	4540      	cmp	r0, r8
 80009b4:	d8d3      	bhi.n	800095e <HAL_RCC_ClockConfig+0xda>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80009b6:	68a3      	ldr	r3, [r4, #8]
 80009b8:	f013 0f0c 	tst.w	r3, #12
 80009bc:	d1f6      	bne.n	80009ac <HAL_RCC_ClockConfig+0x128>
 80009be:	e770      	b.n	80008a2 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009c0:	b2f2      	uxtb	r2, r6
 80009c2:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f003 030f 	and.w	r3, r3, #15
 80009ca:	429e      	cmp	r6, r3
 80009cc:	d19c      	bne.n	8000908 <HAL_RCC_ClockConfig+0x84>
 80009ce:	e76f      	b.n	80008b0 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80009d0:	4904      	ldr	r1, [pc, #16]	; (80009e4 <HAL_RCC_ClockConfig+0x160>)
 80009d2:	68e8      	ldr	r0, [r5, #12]
 80009d4:	688b      	ldr	r3, [r1, #8]
 80009d6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80009da:	4303      	orrs	r3, r0
 80009dc:	608b      	str	r3, [r1, #8]
 80009de:	e76b      	b.n	80008b8 <HAL_RCC_ClockConfig+0x34>
 80009e0:	40023c00 	.word	0x40023c00
 80009e4:	40023800 	.word	0x40023800
 80009e8:	08002327 	.word	0x08002327
 80009ec:	20000004 	.word	0x20000004

080009f0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80009f0:	4b01      	ldr	r3, [pc, #4]	; (80009f8 <HAL_RCC_GetHCLKFreq+0x8>)
 80009f2:	6818      	ldr	r0, [r3, #0]
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	20000004 	.word	0x20000004

080009fc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 80009fe:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	fa92 f2a2 	rbit	r2, r2
 8000a08:	fab2 f282 	clz	r2, r2
 8000a0c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000a10:	40d3      	lsrs	r3, r2
 8000a12:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000a14:	5cd3      	ldrb	r3, [r2, r3]
 8000a16:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000a18:	6810      	ldr	r0, [r2, #0]
}
 8000a1a:	40d8      	lsrs	r0, r3
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800
 8000a24:	08002337 	.word	0x08002337
 8000a28:	20000004 	.word	0x20000004

08000a2c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000a2e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	fa92 f2a2 	rbit	r2, r2
 8000a38:	fab2 f282 	clz	r2, r2
 8000a3c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000a40:	40d3      	lsrs	r3, r2
 8000a42:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000a44:	5cd3      	ldrb	r3, [r2, r3]
 8000a46:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000a48:	6810      	ldr	r0, [r2, #0]
} 
 8000a4a:	40d8      	lsrs	r0, r3
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800
 8000a54:	08002337 	.word	0x08002337
 8000a58:	20000004 	.word	0x20000004

08000a5c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000a5c:	230f      	movs	r3, #15
 8000a5e:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <HAL_RCC_GetClockConfig+0x34>)
 8000a62:	689a      	ldr	r2, [r3, #8]
 8000a64:	f002 0203 	and.w	r2, r2, #3
 8000a68:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8000a6a:	689a      	ldr	r2, [r3, #8]
 8000a6c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000a70:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8000a72:	689a      	ldr	r2, [r3, #8]
 8000a74:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000a78:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	08db      	lsrs	r3, r3, #3
 8000a7e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000a82:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8000a84:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <HAL_RCC_GetClockConfig+0x38>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f003 030f 	and.w	r3, r3, #15
 8000a8c:	600b      	str	r3, [r1, #0]
 8000a8e:	4770      	bx	lr
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40023c00 	.word	0x40023c00

08000a98 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8000a98:	6803      	ldr	r3, [r0, #0]
 8000a9a:	f013 0f05 	tst.w	r3, #5
{
 8000a9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000aa0:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8000aa2:	d13c      	bne.n	8000b1e <HAL_RCCEx_PeriphCLKConfig+0x86>
      }
    }
  }
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000aa4:	6823      	ldr	r3, [r4, #0]
 8000aa6:	079a      	lsls	r2, r3, #30
 8000aa8:	d530      	bpl.n	8000b0c <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	9301      	str	r3, [sp, #4]
 8000aae:	4b4b      	ldr	r3, [pc, #300]	; (8000bdc <HAL_RCCEx_PeriphCLKConfig+0x144>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000ab0:	4d4b      	ldr	r5, [pc, #300]	; (8000be0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ab4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ab8:	641a      	str	r2, [r3, #64]	; 0x40
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	9301      	str	r3, [sp, #4]
 8000ac2:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8000ac4:	682b      	ldr	r3, [r5, #0]
 8000ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aca:	602b      	str	r3, [r5, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000acc:	f7ff fbaa 	bl	8000224 <HAL_GetTick>
 8000ad0:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000ad2:	682b      	ldr	r3, [r5, #0]
 8000ad4:	05d9      	lsls	r1, r3, #23
 8000ad6:	d557      	bpl.n	8000b88 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000ad8:	4d40      	ldr	r5, [pc, #256]	; (8000bdc <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8000ada:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000adc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000ae0:	d158      	bne.n	8000b94 <HAL_RCCEx_PeriphCLKConfig+0xfc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000ae2:	68e3      	ldr	r3, [r4, #12]
 8000ae4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8000ae8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8000aec:	4a3b      	ldr	r2, [pc, #236]	; (8000bdc <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8000aee:	d170      	bne.n	8000bd2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
 8000af0:	6891      	ldr	r1, [r2, #8]
 8000af2:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8000af6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8000afa:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8000afe:	4301      	orrs	r1, r0
 8000b00:	6091      	str	r1, [r2, #8]
 8000b02:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8000b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b08:	430b      	orrs	r3, r1
 8000b0a:	6713      	str	r3, [r2, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8000b0c:	6820      	ldr	r0, [r4, #0]
 8000b0e:	f010 0008 	ands.w	r0, r0, #8
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8000b12:	bf1f      	itttt	ne
 8000b14:	4b33      	ldrne	r3, [pc, #204]	; (8000be4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8000b16:	7c22      	ldrbne	r2, [r4, #16]
 8000b18:	601a      	strne	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8000b1a:	2000      	movne	r0, #0
 8000b1c:	e032      	b.n	8000b84 <HAL_RCCEx_PeriphCLKConfig+0xec>
    __HAL_RCC_PLLI2S_DISABLE();
 8000b1e:	4d32      	ldr	r5, [pc, #200]	; (8000be8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8000b20:	4e2e      	ldr	r6, [pc, #184]	; (8000bdc <HAL_RCCEx_PeriphCLKConfig+0x144>)
    __HAL_RCC_PLLI2S_DISABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000b26:	f7ff fb7d 	bl	8000224 <HAL_GetTick>
 8000b2a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8000b2c:	6833      	ldr	r3, [r6, #0]
 8000b2e:	011b      	lsls	r3, r3, #4
 8000b30:	d422      	bmi.n	8000b78 <HAL_RCCEx_PeriphCLKConfig+0xe0>
 8000b32:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000b36:	fa93 f3a3 	rbit	r3, r3
 8000b3a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8000b3e:	fab3 f183 	clz	r1, r3
 8000b42:	fa92 f2a2 	rbit	r2, r2
 8000b46:	6863      	ldr	r3, [r4, #4]
 8000b48:	408b      	lsls	r3, r1
 8000b4a:	68a1      	ldr	r1, [r4, #8]
 8000b4c:	fab2 f282 	clz	r2, r2
 8000b50:	fa01 f202 	lsl.w	r2, r1, r2
 8000b54:	4313      	orrs	r3, r2
 8000b56:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000b5e:	f7ff fb61 	bl	8000224 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8000b62:	4d1e      	ldr	r5, [pc, #120]	; (8000bdc <HAL_RCCEx_PeriphCLKConfig+0x144>)
    tickstart = HAL_GetTick();
 8000b64:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8000b66:	682b      	ldr	r3, [r5, #0]
 8000b68:	0118      	lsls	r0, r3, #4
 8000b6a:	d49b      	bmi.n	8000aa4 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8000b6c:	f7ff fb5a 	bl	8000224 <HAL_GetTick>
 8000b70:	1b80      	subs	r0, r0, r6
 8000b72:	2802      	cmp	r0, #2
 8000b74:	d9f7      	bls.n	8000b66 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8000b76:	e004      	b.n	8000b82 <HAL_RCCEx_PeriphCLKConfig+0xea>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8000b78:	f7ff fb54 	bl	8000224 <HAL_GetTick>
 8000b7c:	1bc0      	subs	r0, r0, r7
 8000b7e:	2802      	cmp	r0, #2
 8000b80:	d9d4      	bls.n	8000b2c <HAL_RCCEx_PeriphCLKConfig+0x94>
        return HAL_TIMEOUT;
 8000b82:	2003      	movs	r0, #3
}
 8000b84:	b003      	add	sp, #12
 8000b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000b88:	f7ff fb4c 	bl	8000224 <HAL_GetTick>
 8000b8c:	1b80      	subs	r0, r0, r6
 8000b8e:	2802      	cmp	r0, #2
 8000b90:	d99f      	bls.n	8000ad2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8000b92:	e7f6      	b.n	8000b82 <HAL_RCCEx_PeriphCLKConfig+0xea>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000b94:	68e2      	ldr	r2, [r4, #12]
 8000b96:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d0a1      	beq.n	8000ae2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000b9e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8000ba0:	4a12      	ldr	r2, [pc, #72]	; (8000bec <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000baa:	2100      	movs	r1, #0
 8000bac:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8000bae:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8000bb0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000bb2:	07da      	lsls	r2, r3, #31
 8000bb4:	d595      	bpl.n	8000ae2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
        tickstart = HAL_GetTick();
 8000bb6:	f7ff fb35 	bl	8000224 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bba:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000bbe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bc0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000bc2:	079b      	lsls	r3, r3, #30
 8000bc4:	d48d      	bmi.n	8000ae2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bc6:	f7ff fb2d 	bl	8000224 <HAL_GetTick>
 8000bca:	1b80      	subs	r0, r0, r6
 8000bcc:	42b8      	cmp	r0, r7
 8000bce:	d9f7      	bls.n	8000bc0 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8000bd0:	e7d7      	b.n	8000b82 <HAL_RCCEx_PeriphCLKConfig+0xea>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000bd2:	6891      	ldr	r1, [r2, #8]
 8000bd4:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8000bd8:	e792      	b.n	8000b00 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40007000 	.word	0x40007000
 8000be4:	424711e0 	.word	0x424711e0
 8000be8:	42470068 	.word	0x42470068
 8000bec:	42470e40 	.word	0x42470e40

08000bf0 <RTC_EnterInitMode>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8000bf0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8000bf2:	6803      	ldr	r3, [r0, #0]
 8000bf4:	68da      	ldr	r2, [r3, #12]
 8000bf6:	0652      	lsls	r2, r2, #25
{
 8000bf8:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8000bfa:	d501      	bpl.n	8000c00 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8000c00:	f04f 32ff 	mov.w	r2, #4294967295
 8000c04:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8000c06:	f7ff fb0d 	bl	8000224 <HAL_GetTick>
 8000c0a:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8000c0c:	6823      	ldr	r3, [r4, #0]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	065b      	lsls	r3, r3, #25
 8000c12:	d4f3      	bmi.n	8000bfc <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8000c14:	f7ff fb06 	bl	8000224 <HAL_GetTick>
 8000c18:	1b40      	subs	r0, r0, r5
 8000c1a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c1e:	d9f5      	bls.n	8000c0c <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8000c20:	2003      	movs	r0, #3
}
 8000c22:	bd38      	pop	{r3, r4, r5, pc}

08000c24 <HAL_RTC_Init>:
{
 8000c24:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8000c26:	4604      	mov	r4, r0
 8000c28:	b1b0      	cbz	r0, 8000c58 <HAL_RTC_Init+0x34>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8000c2a:	7f43      	ldrb	r3, [r0, #29]
 8000c2c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c30:	b913      	cbnz	r3, 8000c38 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8000c32:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8000c34:	f001 fa02 	bl	800203c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8000c38:	2302      	movs	r3, #2
 8000c3a:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000c3c:	6823      	ldr	r3, [r4, #0]
 8000c3e:	22ca      	movs	r2, #202	; 0xca
 8000c40:	625a      	str	r2, [r3, #36]	; 0x24
 8000c42:	2253      	movs	r2, #83	; 0x53
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8000c46:	4620      	mov	r0, r4
 8000c48:	f7ff ffd2 	bl	8000bf0 <RTC_EnterInitMode>
 8000c4c:	6823      	ldr	r3, [r4, #0]
 8000c4e:	b128      	cbz	r0, 8000c5c <HAL_RTC_Init+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8000c50:	22ff      	movs	r2, #255	; 0xff
 8000c52:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8000c54:	2304      	movs	r3, #4
 8000c56:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8000c58:	2001      	movs	r0, #1
}
 8000c5a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8000c5c:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8000c5e:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8000c60:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8000c64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c68:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8000c6a:	6862      	ldr	r2, [r4, #4]
 8000c6c:	6899      	ldr	r1, [r3, #8]
 8000c6e:	432a      	orrs	r2, r5
 8000c70:	6965      	ldr	r5, [r4, #20]
 8000c72:	432a      	orrs	r2, r5
 8000c74:	430a      	orrs	r2, r1
 8000c76:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8000c78:	68e2      	ldr	r2, [r4, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8000c7c:	691a      	ldr	r2, [r3, #16]
 8000c7e:	68a1      	ldr	r1, [r4, #8]
 8000c80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c84:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8000c86:	68da      	ldr	r2, [r3, #12]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8000c88:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8000c8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c8e:	60da      	str	r2, [r3, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8000c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c96:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8000c98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8000c9e:	22ff      	movs	r2, #255	; 0xff
 8000ca0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8000ca6:	bd38      	pop	{r3, r4, r5, pc}

08000ca8 <HAL_TIM_Base_MspInit>:
 8000ca8:	4770      	bx	lr

08000caa <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000caa:	6803      	ldr	r3, [r0, #0]
 8000cac:	68da      	ldr	r2, [r3, #12]
 8000cae:	f042 0201 	orr.w	r2, r2, #1
 8000cb2:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	f042 0201 	orr.w	r2, r2, #1
 8000cba:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	4770      	bx	lr

08000cc0 <HAL_TIM_OC_DelayElapsedCallback>:
 8000cc0:	4770      	bx	lr

08000cc2 <HAL_TIM_IC_CaptureCallback>:
 8000cc2:	4770      	bx	lr

08000cc4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000cc4:	4770      	bx	lr

08000cc6 <HAL_TIM_TriggerCallback>:
 8000cc6:	4770      	bx	lr

08000cc8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000cc8:	6803      	ldr	r3, [r0, #0]
 8000cca:	691a      	ldr	r2, [r3, #16]
 8000ccc:	0791      	lsls	r1, r2, #30
{
 8000cce:	b510      	push	{r4, lr}
 8000cd0:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000cd2:	d50e      	bpl.n	8000cf2 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000cd4:	68da      	ldr	r2, [r3, #12]
 8000cd6:	0792      	lsls	r2, r2, #30
 8000cd8:	d50b      	bpl.n	8000cf2 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000cda:	f06f 0202 	mvn.w	r2, #2
 8000cde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000ce0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000ce2:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000ce4:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000ce6:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000ce8:	d077      	beq.n	8000dda <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000cea:	f7ff ffea 	bl	8000cc2 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000cf2:	6823      	ldr	r3, [r4, #0]
 8000cf4:	691a      	ldr	r2, [r3, #16]
 8000cf6:	0750      	lsls	r0, r2, #29
 8000cf8:	d510      	bpl.n	8000d1c <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000cfa:	68da      	ldr	r2, [r3, #12]
 8000cfc:	0751      	lsls	r1, r2, #29
 8000cfe:	d50d      	bpl.n	8000d1c <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000d00:	f06f 0204 	mvn.w	r2, #4
 8000d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d06:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d08:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d0a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d0e:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000d10:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d12:	d068      	beq.n	8000de6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d14:	f7ff ffd5 	bl	8000cc2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000d1c:	6823      	ldr	r3, [r4, #0]
 8000d1e:	691a      	ldr	r2, [r3, #16]
 8000d20:	0712      	lsls	r2, r2, #28
 8000d22:	d50f      	bpl.n	8000d44 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000d24:	68da      	ldr	r2, [r3, #12]
 8000d26:	0710      	lsls	r0, r2, #28
 8000d28:	d50c      	bpl.n	8000d44 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000d2a:	f06f 0208 	mvn.w	r2, #8
 8000d2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d30:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d32:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d34:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d36:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000d38:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d3a:	d05a      	beq.n	8000df2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d3c:	f7ff ffc1 	bl	8000cc2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d40:	2300      	movs	r3, #0
 8000d42:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000d44:	6823      	ldr	r3, [r4, #0]
 8000d46:	691a      	ldr	r2, [r3, #16]
 8000d48:	06d2      	lsls	r2, r2, #27
 8000d4a:	d510      	bpl.n	8000d6e <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000d4c:	68da      	ldr	r2, [r3, #12]
 8000d4e:	06d0      	lsls	r0, r2, #27
 8000d50:	d50d      	bpl.n	8000d6e <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000d52:	f06f 0210 	mvn.w	r2, #16
 8000d56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d58:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000d5a:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d5c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000d60:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000d62:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d64:	d04b      	beq.n	8000dfe <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d66:	f7ff ffac 	bl	8000cc2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000d6e:	6823      	ldr	r3, [r4, #0]
 8000d70:	691a      	ldr	r2, [r3, #16]
 8000d72:	07d1      	lsls	r1, r2, #31
 8000d74:	d508      	bpl.n	8000d88 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000d76:	68da      	ldr	r2, [r3, #12]
 8000d78:	07d2      	lsls	r2, r2, #31
 8000d7a:	d505      	bpl.n	8000d88 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000d7c:	f06f 0201 	mvn.w	r2, #1
 8000d80:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000d82:	4620      	mov	r0, r4
 8000d84:	f001 f930 	bl	8001fe8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000d88:	6823      	ldr	r3, [r4, #0]
 8000d8a:	691a      	ldr	r2, [r3, #16]
 8000d8c:	0610      	lsls	r0, r2, #24
 8000d8e:	d508      	bpl.n	8000da2 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000d90:	68da      	ldr	r2, [r3, #12]
 8000d92:	0611      	lsls	r1, r2, #24
 8000d94:	d505      	bpl.n	8000da2 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000d96:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000d9a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	f000 f89c 	bl	8000eda <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000da2:	6823      	ldr	r3, [r4, #0]
 8000da4:	691a      	ldr	r2, [r3, #16]
 8000da6:	0652      	lsls	r2, r2, #25
 8000da8:	d508      	bpl.n	8000dbc <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000daa:	68da      	ldr	r2, [r3, #12]
 8000dac:	0650      	lsls	r0, r2, #25
 8000dae:	d505      	bpl.n	8000dbc <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000db0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000db4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000db6:	4620      	mov	r0, r4
 8000db8:	f7ff ff85 	bl	8000cc6 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000dbc:	6823      	ldr	r3, [r4, #0]
 8000dbe:	691a      	ldr	r2, [r3, #16]
 8000dc0:	0691      	lsls	r1, r2, #26
 8000dc2:	d522      	bpl.n	8000e0a <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000dc4:	68da      	ldr	r2, [r3, #12]
 8000dc6:	0692      	lsls	r2, r2, #26
 8000dc8:	d51f      	bpl.n	8000e0a <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000dca:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000dce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000dd0:	611a      	str	r2, [r3, #16]
    }
  }
}
 8000dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8000dd6:	f000 b87f 	b.w	8000ed8 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000dda:	f7ff ff71 	bl	8000cc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000dde:	4620      	mov	r0, r4
 8000de0:	f7ff ff70 	bl	8000cc4 <HAL_TIM_PWM_PulseFinishedCallback>
 8000de4:	e783      	b.n	8000cee <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000de6:	f7ff ff6b 	bl	8000cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000dea:	4620      	mov	r0, r4
 8000dec:	f7ff ff6a 	bl	8000cc4 <HAL_TIM_PWM_PulseFinishedCallback>
 8000df0:	e792      	b.n	8000d18 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000df2:	f7ff ff65 	bl	8000cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8000df6:	4620      	mov	r0, r4
 8000df8:	f7ff ff64 	bl	8000cc4 <HAL_TIM_PWM_PulseFinishedCallback>
 8000dfc:	e7a0      	b.n	8000d40 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000dfe:	f7ff ff5f 	bl	8000cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e02:	4620      	mov	r0, r4
 8000e04:	f7ff ff5e 	bl	8000cc4 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e08:	e7af      	b.n	8000d6a <HAL_TIM_IRQHandler+0xa2>
 8000e0a:	bd10      	pop	{r4, pc}

08000e0c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000e0c:	4a22      	ldr	r2, [pc, #136]	; (8000e98 <TIM_Base_SetConfig+0x8c>)
  tmpcr1 = TIMx->CR1;
 8000e0e:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000e10:	4290      	cmp	r0, r2
 8000e12:	d00e      	beq.n	8000e32 <TIM_Base_SetConfig+0x26>
 8000e14:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e18:	d00b      	beq.n	8000e32 <TIM_Base_SetConfig+0x26>
 8000e1a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000e1e:	4290      	cmp	r0, r2
 8000e20:	d007      	beq.n	8000e32 <TIM_Base_SetConfig+0x26>
 8000e22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e26:	4290      	cmp	r0, r2
 8000e28:	d003      	beq.n	8000e32 <TIM_Base_SetConfig+0x26>
 8000e2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e2e:	4290      	cmp	r0, r2
 8000e30:	d119      	bne.n	8000e66 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000e32:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000e38:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000e3a:	4a17      	ldr	r2, [pc, #92]	; (8000e98 <TIM_Base_SetConfig+0x8c>)
 8000e3c:	4290      	cmp	r0, r2
 8000e3e:	d104      	bne.n	8000e4a <TIM_Base_SetConfig+0x3e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000e40:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000e46:	4313      	orrs	r3, r2
 8000e48:	e018      	b.n	8000e7c <TIM_Base_SetConfig+0x70>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000e4a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e4e:	d0f7      	beq.n	8000e40 <TIM_Base_SetConfig+0x34>
 8000e50:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <TIM_Base_SetConfig+0x90>)
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d0f4      	beq.n	8000e40 <TIM_Base_SetConfig+0x34>
 8000e56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e5a:	4290      	cmp	r0, r2
 8000e5c:	d0f0      	beq.n	8000e40 <TIM_Base_SetConfig+0x34>
 8000e5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e62:	4290      	cmp	r0, r2
 8000e64:	d0ec      	beq.n	8000e40 <TIM_Base_SetConfig+0x34>
 8000e66:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <TIM_Base_SetConfig+0x94>)
 8000e68:	4290      	cmp	r0, r2
 8000e6a:	d0e9      	beq.n	8000e40 <TIM_Base_SetConfig+0x34>
 8000e6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e70:	4290      	cmp	r0, r2
 8000e72:	d0e5      	beq.n	8000e40 <TIM_Base_SetConfig+0x34>
 8000e74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e78:	4290      	cmp	r0, r2
 8000e7a:	d0e1      	beq.n	8000e40 <TIM_Base_SetConfig+0x34>
  }

  TIMx->CR1 = tmpcr1;
 8000e7c:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000e7e:	688b      	ldr	r3, [r1, #8]
 8000e80:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000e82:	680b      	ldr	r3, [r1, #0]
 8000e84:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <TIM_Base_SetConfig+0x8c>)
 8000e88:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000e8a:	bf04      	itt	eq
 8000e8c:	690b      	ldreq	r3, [r1, #16]
 8000e8e:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000e90:	2301      	movs	r3, #1
 8000e92:	6143      	str	r3, [r0, #20]
}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40010000 	.word	0x40010000
 8000e9c:	40000400 	.word	0x40000400
 8000ea0:	40014000 	.word	0x40014000

08000ea4 <HAL_TIM_Base_Init>:
{ 
 8000ea4:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	b1a0      	cbz	r0, 8000ed4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000eaa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000eae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000eb2:	b91b      	cbnz	r3, 8000ebc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000eb4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8000eb8:	f7ff fef6 	bl	8000ca8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000ec2:	6820      	ldr	r0, [r4, #0]
 8000ec4:	1d21      	adds	r1, r4, #4
 8000ec6:	f7ff ffa1 	bl	8000e0c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000ed4:	2001      	movs	r0, #1
}
 8000ed6:	bd10      	pop	{r4, pc}

08000ed8 <HAL_TIMEx_CommutationCallback>:
 8000ed8:	4770      	bx	lr

08000eda <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000eda:	4770      	bx	lr

08000edc <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8000ee0:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000ee2:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8000ee4:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000ee6:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000ee8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000eec:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8000eee:	6133      	str	r3, [r6, #16]
{
 8000ef0:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000ef2:	6883      	ldr	r3, [r0, #8]
 8000ef4:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8000ef6:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000ef8:	4303      	orrs	r3, r0
 8000efa:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000efc:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f00:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000f02:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f06:	430b      	orrs	r3, r1
 8000f08:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8000f0a:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8000f0c:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8000f0e:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8000f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8000f14:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f16:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8000f1a:	6173      	str	r3, [r6, #20]
 8000f1c:	4b7a      	ldr	r3, [pc, #488]	; (8001108 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f1e:	d17c      	bne.n	800101a <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d003      	beq.n	8000f2c <UART_SetConfig+0x50>
 8000f24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f28:	429e      	cmp	r6, r3
 8000f2a:	d144      	bne.n	8000fb6 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000f2c:	f7ff fd7e 	bl	8000a2c <HAL_RCC_GetPCLK2Freq>
 8000f30:	2519      	movs	r5, #25
 8000f32:	fb05 f300 	mul.w	r3, r5, r0
 8000f36:	6860      	ldr	r0, [r4, #4]
 8000f38:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000f3c:	0040      	lsls	r0, r0, #1
 8000f3e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f42:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f46:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000f4a:	f7ff fd6f 	bl	8000a2c <HAL_RCC_GetPCLK2Freq>
 8000f4e:	6863      	ldr	r3, [r4, #4]
 8000f50:	4368      	muls	r0, r5
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fbb0 f7f3 	udiv	r7, r0, r3
 8000f58:	f7ff fd68 	bl	8000a2c <HAL_RCC_GetPCLK2Freq>
 8000f5c:	6863      	ldr	r3, [r4, #4]
 8000f5e:	4368      	muls	r0, r5
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f66:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f6a:	fb09 7313 	mls	r3, r9, r3, r7
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	3332      	adds	r3, #50	; 0x32
 8000f72:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8000f7c:	f7ff fd56 	bl	8000a2c <HAL_RCC_GetPCLK2Freq>
 8000f80:	6862      	ldr	r2, [r4, #4]
 8000f82:	4368      	muls	r0, r5
 8000f84:	0052      	lsls	r2, r2, #1
 8000f86:	fbb0 faf2 	udiv	sl, r0, r2
 8000f8a:	f7ff fd4f 	bl	8000a2c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000f8e:	6863      	ldr	r3, [r4, #4]
 8000f90:	4368      	muls	r0, r5
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f98:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f9c:	fb09 a313 	mls	r3, r9, r3, sl
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	3332      	adds	r3, #50	; 0x32
 8000fa4:	fbb3 f3f9 	udiv	r3, r3, r9
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000fae:	443b      	add	r3, r7
 8000fb0:	60b3      	str	r3, [r6, #8]
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000fb6:	f7ff fd21 	bl	80009fc <HAL_RCC_GetPCLK1Freq>
 8000fba:	2519      	movs	r5, #25
 8000fbc:	fb05 f300 	mul.w	r3, r5, r0
 8000fc0:	6860      	ldr	r0, [r4, #4]
 8000fc2:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000fc6:	0040      	lsls	r0, r0, #1
 8000fc8:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fcc:	fbb3 f3f9 	udiv	r3, r3, r9
 8000fd0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000fd4:	f7ff fd12 	bl	80009fc <HAL_RCC_GetPCLK1Freq>
 8000fd8:	6863      	ldr	r3, [r4, #4]
 8000fda:	4368      	muls	r0, r5
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	fbb0 f7f3 	udiv	r7, r0, r3
 8000fe2:	f7ff fd0b 	bl	80009fc <HAL_RCC_GetPCLK1Freq>
 8000fe6:	6863      	ldr	r3, [r4, #4]
 8000fe8:	4368      	muls	r0, r5
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ff0:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ff4:	fb09 7313 	mls	r3, r9, r3, r7
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	3332      	adds	r3, #50	; 0x32
 8000ffc:	fbb3 f3f9 	udiv	r3, r3, r9
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001006:	f7ff fcf9 	bl	80009fc <HAL_RCC_GetPCLK1Freq>
 800100a:	6862      	ldr	r2, [r4, #4]
 800100c:	4368      	muls	r0, r5
 800100e:	0052      	lsls	r2, r2, #1
 8001010:	fbb0 faf2 	udiv	sl, r0, r2
 8001014:	f7ff fcf2 	bl	80009fc <HAL_RCC_GetPCLK1Freq>
 8001018:	e7b9      	b.n	8000f8e <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800101a:	429e      	cmp	r6, r3
 800101c:	d002      	beq.n	8001024 <UART_SetConfig+0x148>
 800101e:	4b3b      	ldr	r3, [pc, #236]	; (800110c <UART_SetConfig+0x230>)
 8001020:	429e      	cmp	r6, r3
 8001022:	d140      	bne.n	80010a6 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001024:	f7ff fd02 	bl	8000a2c <HAL_RCC_GetPCLK2Freq>
 8001028:	6867      	ldr	r7, [r4, #4]
 800102a:	2519      	movs	r5, #25
 800102c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001030:	fb05 f300 	mul.w	r3, r5, r0
 8001034:	00bf      	lsls	r7, r7, #2
 8001036:	fbb3 f3f7 	udiv	r3, r3, r7
 800103a:	fbb3 f3f9 	udiv	r3, r3, r9
 800103e:	011f      	lsls	r7, r3, #4
 8001040:	f7ff fcf4 	bl	8000a2c <HAL_RCC_GetPCLK2Freq>
 8001044:	6863      	ldr	r3, [r4, #4]
 8001046:	4368      	muls	r0, r5
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	fbb0 f8f3 	udiv	r8, r0, r3
 800104e:	f7ff fced 	bl	8000a2c <HAL_RCC_GetPCLK2Freq>
 8001052:	6863      	ldr	r3, [r4, #4]
 8001054:	4368      	muls	r0, r5
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	fbb0 f3f3 	udiv	r3, r0, r3
 800105c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001060:	fb09 8313 	mls	r3, r9, r3, r8
 8001064:	011b      	lsls	r3, r3, #4
 8001066:	3332      	adds	r3, #50	; 0x32
 8001068:	fbb3 f3f9 	udiv	r3, r3, r9
 800106c:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001070:	f7ff fcdc 	bl	8000a2c <HAL_RCC_GetPCLK2Freq>
 8001074:	6862      	ldr	r2, [r4, #4]
 8001076:	4368      	muls	r0, r5
 8001078:	0092      	lsls	r2, r2, #2
 800107a:	fbb0 faf2 	udiv	sl, r0, r2
 800107e:	f7ff fcd5 	bl	8000a2c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001082:	6863      	ldr	r3, [r4, #4]
 8001084:	4368      	muls	r0, r5
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	fbb0 f3f3 	udiv	r3, r0, r3
 800108c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001090:	fb09 a313 	mls	r3, r9, r3, sl
 8001094:	011b      	lsls	r3, r3, #4
 8001096:	3332      	adds	r3, #50	; 0x32
 8001098:	fbb3 f3f9 	udiv	r3, r3, r9
 800109c:	f003 030f 	and.w	r3, r3, #15
 80010a0:	ea43 0308 	orr.w	r3, r3, r8
 80010a4:	e783      	b.n	8000fae <UART_SetConfig+0xd2>
 80010a6:	f7ff fca9 	bl	80009fc <HAL_RCC_GetPCLK1Freq>
 80010aa:	6867      	ldr	r7, [r4, #4]
 80010ac:	2519      	movs	r5, #25
 80010ae:	f04f 0964 	mov.w	r9, #100	; 0x64
 80010b2:	fb05 f300 	mul.w	r3, r5, r0
 80010b6:	00bf      	lsls	r7, r7, #2
 80010b8:	fbb3 f3f7 	udiv	r3, r3, r7
 80010bc:	fbb3 f3f9 	udiv	r3, r3, r9
 80010c0:	011f      	lsls	r7, r3, #4
 80010c2:	f7ff fc9b 	bl	80009fc <HAL_RCC_GetPCLK1Freq>
 80010c6:	6863      	ldr	r3, [r4, #4]
 80010c8:	4368      	muls	r0, r5
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	fbb0 f8f3 	udiv	r8, r0, r3
 80010d0:	f7ff fc94 	bl	80009fc <HAL_RCC_GetPCLK1Freq>
 80010d4:	6863      	ldr	r3, [r4, #4]
 80010d6:	4368      	muls	r0, r5
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	fbb0 f3f3 	udiv	r3, r0, r3
 80010de:	fbb3 f3f9 	udiv	r3, r3, r9
 80010e2:	fb09 8313 	mls	r3, r9, r3, r8
 80010e6:	011b      	lsls	r3, r3, #4
 80010e8:	3332      	adds	r3, #50	; 0x32
 80010ea:	fbb3 f3f9 	udiv	r3, r3, r9
 80010ee:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80010f2:	f7ff fc83 	bl	80009fc <HAL_RCC_GetPCLK1Freq>
 80010f6:	6862      	ldr	r2, [r4, #4]
 80010f8:	4368      	muls	r0, r5
 80010fa:	0092      	lsls	r2, r2, #2
 80010fc:	fbb0 faf2 	udiv	sl, r0, r2
 8001100:	f7ff fc7c 	bl	80009fc <HAL_RCC_GetPCLK1Freq>
 8001104:	e7bd      	b.n	8001082 <UART_SetConfig+0x1a6>
 8001106:	bf00      	nop
 8001108:	40011000 	.word	0x40011000
 800110c:	40011400 	.word	0x40011400

08001110 <HAL_UART_Init>:
{
 8001110:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001112:	4604      	mov	r4, r0
 8001114:	b340      	cbz	r0, 8001168 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001116:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800111a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800111e:	b91b      	cbnz	r3, 8001128 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001120:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001124:	f001 f854 	bl	80021d0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001128:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800112a:	2324      	movs	r3, #36	; 0x24
 800112c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001130:	68d3      	ldr	r3, [r2, #12]
 8001132:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001136:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001138:	4620      	mov	r0, r4
 800113a:	f7ff fecf 	bl	8000edc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800113e:	6823      	ldr	r3, [r4, #0]
 8001140:	691a      	ldr	r2, [r3, #16]
 8001142:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001146:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001148:	695a      	ldr	r2, [r3, #20]
 800114a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800114e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001150:	68da      	ldr	r2, [r3, #12]
 8001152:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001156:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001158:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800115a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800115c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800115e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001162:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001166:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001168:	2001      	movs	r0, #1
}
 800116a:	bd10      	pop	{r4, pc}

0800116c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800116c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800116e:	f000 fbe9 	bl	8001944 <vTaskStartScheduler>
  
  return osOK;
}
 8001172:	2000      	movs	r0, #0
 8001174:	bd08      	pop	{r3, pc}

08001176 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001176:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001178:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 800117c:	8a02      	ldrh	r2, [r0, #16]
{
 800117e:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001180:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8001184:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8001186:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001188:	bf14      	ite	ne
 800118a:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800118c:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800118e:	a803      	add	r0, sp, #12
 8001190:	9001      	str	r0, [sp, #4]
 8001192:	9400      	str	r4, [sp, #0]
 8001194:	4628      	mov	r0, r5
 8001196:	f000 fb05 	bl	80017a4 <xTaskCreate>
 800119a:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800119c:	bf0c      	ite	eq
 800119e:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80011a0:	2000      	movne	r0, #0
}
 80011a2:	b005      	add	sp, #20
 80011a4:	bd30      	pop	{r4, r5, pc}

080011a6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80011a6:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80011a8:	2800      	cmp	r0, #0
 80011aa:	bf08      	it	eq
 80011ac:	2001      	moveq	r0, #1
 80011ae:	f000 fd17 	bl	8001be0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80011b2:	2000      	movs	r0, #0
 80011b4:	bd08      	pop	{r3, pc}

080011b6 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80011b6:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80011b8:	f000 fdaa 	bl	8001d10 <xTaskGetSchedulerState>
 80011bc:	2801      	cmp	r0, #1
 80011be:	d003      	beq.n	80011c8 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80011c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80011c4:	f000 b9f6 	b.w	80015b4 <xPortSysTickHandler>
 80011c8:	bd08      	pop	{r3, pc}
	...

080011cc <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80011cc:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <prvInsertBlockIntoFreeList+0x40>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4282      	cmp	r2, r0
 80011d4:	d318      	bcc.n	8001208 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80011d6:	685c      	ldr	r4, [r3, #4]
 80011d8:	1919      	adds	r1, r3, r4
 80011da:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80011dc:	bf01      	itttt	eq
 80011de:	6841      	ldreq	r1, [r0, #4]
 80011e0:	4618      	moveq	r0, r3
 80011e2:	1909      	addeq	r1, r1, r4
 80011e4:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80011e6:	6844      	ldr	r4, [r0, #4]
 80011e8:	1901      	adds	r1, r0, r4
 80011ea:	428a      	cmp	r2, r1
 80011ec:	d107      	bne.n	80011fe <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80011ee:	4908      	ldr	r1, [pc, #32]	; (8001210 <prvInsertBlockIntoFreeList+0x44>)
 80011f0:	6809      	ldr	r1, [r1, #0]
 80011f2:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80011f4:	bf1f      	itttt	ne
 80011f6:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80011f8:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80011fa:	1909      	addne	r1, r1, r4
 80011fc:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80011fe:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001200:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001202:	bf18      	it	ne
 8001204:	6018      	strne	r0, [r3, #0]
 8001206:	bd10      	pop	{r4, pc}
 8001208:	4613      	mov	r3, r2
 800120a:	e7e1      	b.n	80011d0 <prvInsertBlockIntoFreeList+0x4>
 800120c:	20003c34 	.word	0x20003c34
 8001210:	20000024 	.word	0x20000024

08001214 <pvPortMalloc>:
{
 8001214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001218:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800121a:	f000 fbcf 	bl	80019bc <vTaskSuspendAll>
		if( pxEnd == NULL )
 800121e:	493e      	ldr	r1, [pc, #248]	; (8001318 <pvPortMalloc+0x104>)
 8001220:	4d3e      	ldr	r5, [pc, #248]	; (800131c <pvPortMalloc+0x108>)
 8001222:	680b      	ldr	r3, [r1, #0]
 8001224:	bb0b      	cbnz	r3, 800126a <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8001226:	4a3e      	ldr	r2, [pc, #248]	; (8001320 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001228:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800122a:	bf1f      	itttt	ne
 800122c:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800122e:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001232:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8001236:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001238:	bf14      	ite	ne
 800123a:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800123c:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001240:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8001242:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001244:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001248:	4e36      	ldr	r6, [pc, #216]	; (8001324 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 800124a:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800124c:	2000      	movs	r0, #0
 800124e:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001250:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8001252:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001254:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001256:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001258:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800125a:	4b33      	ldr	r3, [pc, #204]	; (8001328 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800125c:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800125e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001260:	4b32      	ldr	r3, [pc, #200]	; (800132c <pvPortMalloc+0x118>)
 8001262:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001264:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001268:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800126a:	682f      	ldr	r7, [r5, #0]
 800126c:	4227      	tst	r7, r4
 800126e:	d116      	bne.n	800129e <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8001270:	2c00      	cmp	r4, #0
 8001272:	d041      	beq.n	80012f8 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8001274:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001278:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800127a:	bf1c      	itt	ne
 800127c:	f023 0307 	bicne.w	r3, r3, #7
 8001280:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001282:	b163      	cbz	r3, 800129e <pvPortMalloc+0x8a>
 8001284:	4a29      	ldr	r2, [pc, #164]	; (800132c <pvPortMalloc+0x118>)
 8001286:	6816      	ldr	r6, [r2, #0]
 8001288:	42b3      	cmp	r3, r6
 800128a:	4690      	mov	r8, r2
 800128c:	d807      	bhi.n	800129e <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800128e:	4a25      	ldr	r2, [pc, #148]	; (8001324 <pvPortMalloc+0x110>)
 8001290:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001292:	6868      	ldr	r0, [r5, #4]
 8001294:	4283      	cmp	r3, r0
 8001296:	d804      	bhi.n	80012a2 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001298:	6809      	ldr	r1, [r1, #0]
 800129a:	428d      	cmp	r5, r1
 800129c:	d107      	bne.n	80012ae <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800129e:	2400      	movs	r4, #0
 80012a0:	e02a      	b.n	80012f8 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80012a2:	682c      	ldr	r4, [r5, #0]
 80012a4:	2c00      	cmp	r4, #0
 80012a6:	d0f7      	beq.n	8001298 <pvPortMalloc+0x84>
 80012a8:	462a      	mov	r2, r5
 80012aa:	4625      	mov	r5, r4
 80012ac:	e7f1      	b.n	8001292 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80012ae:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80012b0:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80012b2:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80012b4:	1ac2      	subs	r2, r0, r3
 80012b6:	2a10      	cmp	r2, #16
 80012b8:	d90f      	bls.n	80012da <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80012ba:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80012bc:	0741      	lsls	r1, r0, #29
 80012be:	d008      	beq.n	80012d2 <pvPortMalloc+0xbe>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80012c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012c4:	f383 8811 	msr	BASEPRI, r3
 80012c8:	f3bf 8f6f 	isb	sy
 80012cc:	f3bf 8f4f 	dsb	sy
 80012d0:	e7fe      	b.n	80012d0 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80012d2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80012d4:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80012d6:	f7ff ff79 	bl	80011cc <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80012da:	4913      	ldr	r1, [pc, #76]	; (8001328 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80012dc:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80012de:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80012e0:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80012e2:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80012e4:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 80012e6:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80012ea:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80012ee:	bf38      	it	cc
 80012f0:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80012f2:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80012f4:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80012f6:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80012f8:	f000 fbfa 	bl	8001af0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80012fc:	0763      	lsls	r3, r4, #29
 80012fe:	d008      	beq.n	8001312 <pvPortMalloc+0xfe>
 8001300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001304:	f383 8811 	msr	BASEPRI, r3
 8001308:	f3bf 8f6f 	isb	sy
 800130c:	f3bf 8f4f 	dsb	sy
 8001310:	e7fe      	b.n	8001310 <pvPortMalloc+0xfc>
}
 8001312:	4620      	mov	r0, r4
 8001314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001318:	20000024 	.word	0x20000024
 800131c:	20003c28 	.word	0x20003c28
 8001320:	20000028 	.word	0x20000028
 8001324:	20003c34 	.word	0x20003c34
 8001328:	20003c30 	.word	0x20003c30
 800132c:	20003c2c 	.word	0x20003c2c

08001330 <vPortFree>:
{
 8001330:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001332:	4604      	mov	r4, r0
 8001334:	b370      	cbz	r0, 8001394 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001336:	4a18      	ldr	r2, [pc, #96]	; (8001398 <vPortFree+0x68>)
 8001338:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800133c:	6812      	ldr	r2, [r2, #0]
 800133e:	4213      	tst	r3, r2
 8001340:	d108      	bne.n	8001354 <vPortFree+0x24>
 8001342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001346:	f383 8811 	msr	BASEPRI, r3
 800134a:	f3bf 8f6f 	isb	sy
 800134e:	f3bf 8f4f 	dsb	sy
 8001352:	e7fe      	b.n	8001352 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001354:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001358:	b141      	cbz	r1, 800136c <vPortFree+0x3c>
 800135a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800135e:	f383 8811 	msr	BASEPRI, r3
 8001362:	f3bf 8f6f 	isb	sy
 8001366:	f3bf 8f4f 	dsb	sy
 800136a:	e7fe      	b.n	800136a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800136c:	ea23 0302 	bic.w	r3, r3, r2
 8001370:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001374:	f000 fb22 	bl	80019bc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001378:	4a08      	ldr	r2, [pc, #32]	; (800139c <vPortFree+0x6c>)
 800137a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800137e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001380:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001384:	440b      	add	r3, r1
 8001386:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001388:	f7ff ff20 	bl	80011cc <prvInsertBlockIntoFreeList>
}
 800138c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8001390:	f000 bbae 	b.w	8001af0 <xTaskResumeAll>
 8001394:	bd10      	pop	{r4, pc}
 8001396:	bf00      	nop
 8001398:	20003c28 	.word	0x20003c28
 800139c:	20003c2c 	.word	0x20003c2c

080013a0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013a0:	f100 0308 	add.w	r3, r0, #8
 80013a4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80013a6:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013aa:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013ac:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80013ae:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80013b0:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80013b2:	6003      	str	r3, [r0, #0]
 80013b4:	4770      	bx	lr

080013b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	6103      	str	r3, [r0, #16]
 80013ba:	4770      	bx	lr

080013bc <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80013bc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80013be:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80013c8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80013ca:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80013cc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80013ce:	3301      	adds	r3, #1
 80013d0:	6003      	str	r3, [r0, #0]
 80013d2:	4770      	bx	lr

080013d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80013d4:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80013d6:	1c53      	adds	r3, r2, #1
{
 80013d8:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 80013da:	d10a      	bne.n	80013f2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80013dc:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80013e2:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80013e4:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80013e6:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80013e8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80013ea:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80013ec:	3301      	adds	r3, #1
 80013ee:	6003      	str	r3, [r0, #0]
 80013f0:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013f2:	f100 0308 	add.w	r3, r0, #8
 80013f6:	685c      	ldr	r4, [r3, #4]
 80013f8:	6825      	ldr	r5, [r4, #0]
 80013fa:	42aa      	cmp	r2, r5
 80013fc:	d3ef      	bcc.n	80013de <vListInsert+0xa>
 80013fe:	4623      	mov	r3, r4
 8001400:	e7f9      	b.n	80013f6 <vListInsert+0x22>

08001402 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001402:	6841      	ldr	r1, [r0, #4]
 8001404:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001406:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001408:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800140a:	6882      	ldr	r2, [r0, #8]
 800140c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001412:	bf08      	it	eq
 8001414:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001416:	2200      	movs	r2, #0
 8001418:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800141a:	6818      	ldr	r0, [r3, #0]
 800141c:	3801      	subs	r0, #1
 800141e:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001420:	4770      	bx	lr
	...

08001424 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <prvTaskExitError+0x2c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	3301      	adds	r3, #1
 800142a:	d008      	beq.n	800143e <prvTaskExitError+0x1a>
 800142c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001430:	f383 8811 	msr	BASEPRI, r3
 8001434:	f3bf 8f6f 	isb	sy
 8001438:	f3bf 8f4f 	dsb	sy
 800143c:	e7fe      	b.n	800143c <prvTaskExitError+0x18>
 800143e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001442:	f383 8811 	msr	BASEPRI, r3
 8001446:	f3bf 8f6f 	isb	sy
 800144a:	f3bf 8f4f 	dsb	sy
 800144e:	e7fe      	b.n	800144e <prvTaskExitError+0x2a>
 8001450:	20000000 	.word	0x20000000

08001454 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001454:	4806      	ldr	r0, [pc, #24]	; (8001470 <prvPortStartFirstTask+0x1c>)
 8001456:	6800      	ldr	r0, [r0, #0]
 8001458:	6800      	ldr	r0, [r0, #0]
 800145a:	f380 8808 	msr	MSP, r0
 800145e:	b662      	cpsie	i
 8001460:	b661      	cpsie	f
 8001462:	f3bf 8f4f 	dsb	sy
 8001466:	f3bf 8f6f 	isb	sy
 800146a:	df00      	svc	0
 800146c:	bf00      	nop
 800146e:	0000      	.short	0x0000
 8001470:	e000ed08 	.word	0xe000ed08

08001474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001474:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001484 <vPortEnableVFP+0x10>
 8001478:	6801      	ldr	r1, [r0, #0]
 800147a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800147e:	6001      	str	r1, [r0, #0]
 8001480:	4770      	bx	lr
 8001482:	0000      	.short	0x0000
 8001484:	e000ed88 	.word	0xe000ed88

08001488 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001488:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800148c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001490:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <pxPortInitialiseStack+0x28>)
 8001492:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001496:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800149a:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800149e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80014a2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80014a6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80014aa:	3844      	subs	r0, #68	; 0x44
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	08001425 	.word	0x08001425
	...

080014c0 <SVC_Handler>:
	__asm volatile (
 80014c0:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <pxCurrentTCBConst2>)
 80014c2:	6819      	ldr	r1, [r3, #0]
 80014c4:	6808      	ldr	r0, [r1, #0]
 80014c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014ca:	f380 8809 	msr	PSP, r0
 80014ce:	f3bf 8f6f 	isb	sy
 80014d2:	f04f 0000 	mov.w	r0, #0
 80014d6:	f380 8811 	msr	BASEPRI, r0
 80014da:	4770      	bx	lr
 80014dc:	f3af 8000 	nop.w

080014e0 <pxCurrentTCBConst2>:
 80014e0:	20003c44 	.word	0x20003c44

080014e4 <vPortEnterCritical>:
 80014e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014e8:	f383 8811 	msr	BASEPRI, r3
 80014ec:	f3bf 8f6f 	isb	sy
 80014f0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80014f4:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <vPortEnterCritical+0x3c>)
 80014f6:	6813      	ldr	r3, [r2, #0]
 80014f8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80014fa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80014fc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80014fe:	d10d      	bne.n	800151c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <vPortEnterCritical+0x40>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001508:	d008      	beq.n	800151c <vPortEnterCritical+0x38>
 800150a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800150e:	f383 8811 	msr	BASEPRI, r3
 8001512:	f3bf 8f6f 	isb	sy
 8001516:	f3bf 8f4f 	dsb	sy
 800151a:	e7fe      	b.n	800151a <vPortEnterCritical+0x36>
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000000 	.word	0x20000000
 8001524:	e000ed04 	.word	0xe000ed04

08001528 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001528:	4a08      	ldr	r2, [pc, #32]	; (800154c <vPortExitCritical+0x24>)
 800152a:	6813      	ldr	r3, [r2, #0]
 800152c:	b943      	cbnz	r3, 8001540 <vPortExitCritical+0x18>
 800152e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001532:	f383 8811 	msr	BASEPRI, r3
 8001536:	f3bf 8f6f 	isb	sy
 800153a:	f3bf 8f4f 	dsb	sy
 800153e:	e7fe      	b.n	800153e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001540:	3b01      	subs	r3, #1
 8001542:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001544:	b90b      	cbnz	r3, 800154a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001546:	f383 8811 	msr	BASEPRI, r3
 800154a:	4770      	bx	lr
 800154c:	20000000 	.word	0x20000000

08001550 <PendSV_Handler>:
	__asm volatile
 8001550:	f3ef 8009 	mrs	r0, PSP
 8001554:	f3bf 8f6f 	isb	sy
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <pxCurrentTCBConst>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	f01e 0f10 	tst.w	lr, #16
 8001560:	bf08      	it	eq
 8001562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800156a:	6010      	str	r0, [r2, #0]
 800156c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001574:	f380 8811 	msr	BASEPRI, r0
 8001578:	f3bf 8f4f 	dsb	sy
 800157c:	f3bf 8f6f 	isb	sy
 8001580:	f000 fb8c 	bl	8001c9c <vTaskSwitchContext>
 8001584:	f04f 0000 	mov.w	r0, #0
 8001588:	f380 8811 	msr	BASEPRI, r0
 800158c:	bc08      	pop	{r3}
 800158e:	6819      	ldr	r1, [r3, #0]
 8001590:	6808      	ldr	r0, [r1, #0]
 8001592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001596:	f01e 0f10 	tst.w	lr, #16
 800159a:	bf08      	it	eq
 800159c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80015a0:	f380 8809 	msr	PSP, r0
 80015a4:	f3bf 8f6f 	isb	sy
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	f3af 8000 	nop.w

080015b0 <pxCurrentTCBConst>:
 80015b0:	20003c44 	.word	0x20003c44

080015b4 <xPortSysTickHandler>:
{
 80015b4:	b508      	push	{r3, lr}
	__asm volatile
 80015b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ba:	f383 8811 	msr	BASEPRI, r3
 80015be:	f3bf 8f6f 	isb	sy
 80015c2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80015c6:	f000 fa01 	bl	80019cc <xTaskIncrementTick>
 80015ca:	b118      	cbz	r0, 80015d4 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <xPortSysTickHandler+0x28>)
 80015ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015d2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80015d4:	2300      	movs	r3, #0
 80015d6:	f383 8811 	msr	BASEPRI, r3
 80015da:	bd08      	pop	{r3, pc}
 80015dc:	e000ed04 	.word	0xe000ed04

080015e0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <vPortSetupTimerInterrupt+0x1c>)
 80015e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <vPortSetupTimerInterrupt+0x20>)
 80015ee:	3b01      	subs	r3, #1
 80015f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <vPortSetupTimerInterrupt+0x24>)
 80015f4:	2207      	movs	r2, #7
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000004 	.word	0x20000004
 8001600:	e000e014 	.word	0xe000e014
 8001604:	e000e010 	.word	0xe000e010

08001608 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001608:	4b31      	ldr	r3, [pc, #196]	; (80016d0 <xPortStartScheduler+0xc8>)
 800160a:	4a32      	ldr	r2, [pc, #200]	; (80016d4 <xPortStartScheduler+0xcc>)
{
 800160c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800160e:	6819      	ldr	r1, [r3, #0]
 8001610:	4291      	cmp	r1, r2
 8001612:	d108      	bne.n	8001626 <xPortStartScheduler+0x1e>
	__asm volatile
 8001614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001618:	f383 8811 	msr	BASEPRI, r3
 800161c:	f3bf 8f6f 	isb	sy
 8001620:	f3bf 8f4f 	dsb	sy
 8001624:	e7fe      	b.n	8001624 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <xPortStartScheduler+0xd0>)
 800162a:	429a      	cmp	r2, r3
 800162c:	d108      	bne.n	8001640 <xPortStartScheduler+0x38>
 800162e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001632:	f383 8811 	msr	BASEPRI, r3
 8001636:	f3bf 8f6f 	isb	sy
 800163a:	f3bf 8f4f 	dsb	sy
 800163e:	e7fe      	b.n	800163e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001640:	4b26      	ldr	r3, [pc, #152]	; (80016dc <xPortStartScheduler+0xd4>)
 8001642:	781a      	ldrb	r2, [r3, #0]
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001648:	22ff      	movs	r2, #255	; 0xff
 800164a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800164c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800164e:	4a24      	ldr	r2, [pc, #144]	; (80016e0 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001650:	b2db      	uxtb	r3, r3
 8001652:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001656:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800165a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800165e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001660:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <xPortStartScheduler+0xdc>)
 8001662:	2207      	movs	r2, #7
 8001664:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001666:	2100      	movs	r1, #0
 8001668:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800166c:	0600      	lsls	r0, r0, #24
 800166e:	f102 34ff 	add.w	r4, r2, #4294967295
 8001672:	d423      	bmi.n	80016bc <xPortStartScheduler+0xb4>
 8001674:	b101      	cbz	r1, 8001678 <xPortStartScheduler+0x70>
 8001676:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800167c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001680:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001682:	9b01      	ldr	r3, [sp, #4]
 8001684:	4a15      	ldr	r2, [pc, #84]	; (80016dc <xPortStartScheduler+0xd4>)
 8001686:	b2db      	uxtb	r3, r3
 8001688:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <xPortStartScheduler+0xe0>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001692:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800169a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800169c:	f7ff ffa0 	bl	80015e0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <xPortStartScheduler+0xe4>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80016a6:	f7ff fee5 	bl	8001474 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80016aa:	4a11      	ldr	r2, [pc, #68]	; (80016f0 <xPortStartScheduler+0xe8>)
 80016ac:	6813      	ldr	r3, [r2, #0]
 80016ae:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80016b2:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80016b4:	f7ff fece 	bl	8001454 <prvPortStartFirstTask>
	prvTaskExitError();
 80016b8:	f7ff feb4 	bl	8001424 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80016bc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80016c0:	0052      	lsls	r2, r2, #1
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	f88d 2003 	strb.w	r2, [sp, #3]
 80016c8:	2101      	movs	r1, #1
 80016ca:	4622      	mov	r2, r4
 80016cc:	e7cc      	b.n	8001668 <xPortStartScheduler+0x60>
 80016ce:	bf00      	nop
 80016d0:	e000ed00 	.word	0xe000ed00
 80016d4:	410fc271 	.word	0x410fc271
 80016d8:	410fc270 	.word	0x410fc270
 80016dc:	e000e400 	.word	0xe000e400
 80016e0:	20003c3c 	.word	0x20003c3c
 80016e4:	20003c40 	.word	0x20003c40
 80016e8:	e000ed20 	.word	0xe000ed20
 80016ec:	20000000 	.word	0x20000000
 80016f0:	e000ef34 	.word	0xe000ef34

080016f4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80016f4:	4a06      	ldr	r2, [pc, #24]	; (8001710 <prvResetNextTaskUnblockTime+0x1c>)
 80016f6:	6813      	ldr	r3, [r2, #0]
 80016f8:	6819      	ldr	r1, [r3, #0]
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <prvResetNextTaskUnblockTime+0x20>)
 80016fc:	b919      	cbnz	r1, 8001706 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80016fe:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800170a:	68d2      	ldr	r2, [r2, #12]
 800170c:	6852      	ldr	r2, [r2, #4]
 800170e:	e7f8      	b.n	8001702 <prvResetNextTaskUnblockTime+0xe>
 8001710:	20003c48 	.word	0x20003c48
 8001714:	20003d20 	.word	0x20003d20

08001718 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800171a:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800171c:	4e1b      	ldr	r6, [pc, #108]	; (800178c <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800171e:	681d      	ldr	r5, [r3, #0]
{
 8001720:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001722:	6830      	ldr	r0, [r6, #0]
 8001724:	3004      	adds	r0, #4
{
 8001726:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001728:	f7ff fe6b 	bl	8001402 <uxListRemove>
 800172c:	4633      	mov	r3, r6
 800172e:	b940      	cbnz	r0, 8001742 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001730:	6831      	ldr	r1, [r6, #0]
 8001732:	4e17      	ldr	r6, [pc, #92]	; (8001790 <prvAddCurrentTaskToDelayedList+0x78>)
 8001734:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001736:	6832      	ldr	r2, [r6, #0]
 8001738:	2001      	movs	r0, #1
 800173a:	4088      	lsls	r0, r1
 800173c:	ea22 0200 	bic.w	r2, r2, r0
 8001740:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001742:	1c62      	adds	r2, r4, #1
 8001744:	d107      	bne.n	8001756 <prvAddCurrentTaskToDelayedList+0x3e>
 8001746:	b137      	cbz	r7, 8001756 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001748:	6819      	ldr	r1, [r3, #0]
 800174a:	4812      	ldr	r0, [pc, #72]	; (8001794 <prvAddCurrentTaskToDelayedList+0x7c>)
 800174c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800174e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001752:	f7ff be33 	b.w	80013bc <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001756:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001758:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800175a:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800175c:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800175e:	d907      	bls.n	8001770 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001760:	4a0d      	ldr	r2, [pc, #52]	; (8001798 <prvAddCurrentTaskToDelayedList+0x80>)
 8001762:	6810      	ldr	r0, [r2, #0]
 8001764:	6819      	ldr	r1, [r3, #0]
}
 8001766:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800176a:	3104      	adds	r1, #4
 800176c:	f7ff be32 	b.w	80013d4 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001770:	4a0a      	ldr	r2, [pc, #40]	; (800179c <prvAddCurrentTaskToDelayedList+0x84>)
 8001772:	6810      	ldr	r0, [r2, #0]
 8001774:	6819      	ldr	r1, [r3, #0]
 8001776:	3104      	adds	r1, #4
 8001778:	f7ff fe2c 	bl	80013d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <prvAddCurrentTaskToDelayedList+0x88>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8001782:	bf38      	it	cc
 8001784:	601c      	strcc	r4, [r3, #0]
 8001786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001788:	20003d68 	.word	0x20003d68
 800178c:	20003c44 	.word	0x20003c44
 8001790:	20003cf0 	.word	0x20003cf0
 8001794:	20003d40 	.word	0x20003d40
 8001798:	20003c4c 	.word	0x20003c4c
 800179c:	20003c48 	.word	0x20003c48
 80017a0:	20003d20 	.word	0x20003d20

080017a4 <xTaskCreate>:
	{
 80017a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017a8:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80017ac:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017ae:	4650      	mov	r0, sl
	{
 80017b0:	460f      	mov	r7, r1
 80017b2:	4699      	mov	r9, r3
 80017b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017b6:	f7ff fd2d 	bl	8001214 <pvPortMalloc>
			if( pxStack != NULL )
 80017ba:	4605      	mov	r5, r0
 80017bc:	2800      	cmp	r0, #0
 80017be:	f000 8096 	beq.w	80018ee <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80017c2:	2054      	movs	r0, #84	; 0x54
 80017c4:	f7ff fd26 	bl	8001214 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80017c8:	4604      	mov	r4, r0
 80017ca:	2800      	cmp	r0, #0
 80017cc:	f000 808c 	beq.w	80018e8 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80017d0:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 80017d4:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80017d6:	4455      	add	r5, sl
 80017d8:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80017da:	f025 0a07 	bic.w	sl, r5, #7
 80017de:	f100 0234 	add.w	r2, r0, #52	; 0x34
 80017e2:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80017e4:	7859      	ldrb	r1, [r3, #1]
 80017e6:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 80017ea:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80017ee:	b109      	cbz	r1, 80017f4 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80017f0:	42bb      	cmp	r3, r7
 80017f2:	d1f7      	bne.n	80017e4 <xTaskCreate+0x40>
 80017f4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80017f6:	2d06      	cmp	r5, #6
 80017f8:	bf28      	it	cs
 80017fa:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80017fc:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001800:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8001802:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001804:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001806:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001808:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 800180c:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001810:	f7ff fdd1 	bl	80013b6 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001814:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001818:	f104 0018 	add.w	r0, r4, #24
 800181c:	f7ff fdcb 	bl	80013b6 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001820:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001824:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001826:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001828:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800182a:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800182e:	464a      	mov	r2, r9
 8001830:	4641      	mov	r1, r8
 8001832:	4650      	mov	r0, sl
 8001834:	f7ff fe28 	bl	8001488 <pxPortInitialiseStack>
 8001838:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800183a:	b106      	cbz	r6, 800183e <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800183c:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 800183e:	f7ff fe51 	bl	80014e4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001842:	4b32      	ldr	r3, [pc, #200]	; (800190c <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8001844:	4e32      	ldr	r6, [pc, #200]	; (8001910 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 800193c <xTaskCreate+0x198>
 800184c:	3201      	adds	r2, #1
 800184e:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001850:	6835      	ldr	r5, [r6, #0]
 8001852:	2d00      	cmp	r5, #0
 8001854:	d14e      	bne.n	80018f4 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8001856:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d11d      	bne.n	800189a <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800185e:	eb08 0005 	add.w	r0, r8, r5
 8001862:	3514      	adds	r5, #20
 8001864:	f7ff fd9c 	bl	80013a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001868:	2d8c      	cmp	r5, #140	; 0x8c
 800186a:	d1f8      	bne.n	800185e <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 800186c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8001940 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8001870:	4d28      	ldr	r5, [pc, #160]	; (8001914 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8001872:	4648      	mov	r0, r9
 8001874:	f7ff fd94 	bl	80013a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001878:	4628      	mov	r0, r5
 800187a:	f7ff fd91 	bl	80013a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800187e:	4826      	ldr	r0, [pc, #152]	; (8001918 <xTaskCreate+0x174>)
 8001880:	f7ff fd8e 	bl	80013a0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001884:	4825      	ldr	r0, [pc, #148]	; (800191c <xTaskCreate+0x178>)
 8001886:	f7ff fd8b 	bl	80013a0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800188a:	4825      	ldr	r0, [pc, #148]	; (8001920 <xTaskCreate+0x17c>)
 800188c:	f7ff fd88 	bl	80013a0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001890:	4b24      	ldr	r3, [pc, #144]	; (8001924 <xTaskCreate+0x180>)
 8001892:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001896:	4b24      	ldr	r3, [pc, #144]	; (8001928 <xTaskCreate+0x184>)
 8001898:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800189a:	4a24      	ldr	r2, [pc, #144]	; (800192c <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 800189c:	4924      	ldr	r1, [pc, #144]	; (8001930 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 800189e:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80018a0:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80018a2:	3301      	adds	r3, #1
 80018a4:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80018a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80018a8:	2501      	movs	r5, #1
 80018aa:	fa05 f302 	lsl.w	r3, r5, r2
 80018ae:	4303      	orrs	r3, r0
 80018b0:	2014      	movs	r0, #20
 80018b2:	600b      	str	r3, [r1, #0]
 80018b4:	fb00 8002 	mla	r0, r0, r2, r8
 80018b8:	4639      	mov	r1, r7
 80018ba:	f7ff fd7f 	bl	80013bc <vListInsertEnd>
	taskEXIT_CRITICAL();
 80018be:	f7ff fe33 	bl	8001528 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80018c2:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <xTaskCreate+0x190>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	b163      	cbz	r3, 80018e2 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80018c8:	6833      	ldr	r3, [r6, #0]
 80018ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d207      	bcs.n	80018e2 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 80018d2:	4b19      	ldr	r3, [pc, #100]	; (8001938 <xTaskCreate+0x194>)
 80018d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	f3bf 8f4f 	dsb	sy
 80018de:	f3bf 8f6f 	isb	sy
	}
 80018e2:	4628      	mov	r0, r5
 80018e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 80018e8:	4628      	mov	r0, r5
 80018ea:	f7ff fd21 	bl	8001330 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80018ee:	f04f 35ff 	mov.w	r5, #4294967295
 80018f2:	e7f6      	b.n	80018e2 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <xTaskCreate+0x190>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1ce      	bne.n	800189a <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80018fc:	6833      	ldr	r3, [r6, #0]
 80018fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001900:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001902:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001904:	bf98      	it	ls
 8001906:	6034      	strls	r4, [r6, #0]
 8001908:	e7c7      	b.n	800189a <xTaskCreate+0xf6>
 800190a:	bf00      	nop
 800190c:	20003cdc 	.word	0x20003cdc
 8001910:	20003c44 	.word	0x20003c44
 8001914:	20003d08 	.word	0x20003d08
 8001918:	20003d28 	.word	0x20003d28
 800191c:	20003d54 	.word	0x20003d54
 8001920:	20003d40 	.word	0x20003d40
 8001924:	20003c48 	.word	0x20003c48
 8001928:	20003c4c 	.word	0x20003c4c
 800192c:	20003cec 	.word	0x20003cec
 8001930:	20003cf0 	.word	0x20003cf0
 8001934:	20003d3c 	.word	0x20003d3c
 8001938:	e000ed04 	.word	0xe000ed04
 800193c:	20003c50 	.word	0x20003c50
 8001940:	20003cf4 	.word	0x20003cf4

08001944 <vTaskStartScheduler>:
{
 8001944:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8001946:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <vTaskStartScheduler+0x60>)
 8001948:	9301      	str	r3, [sp, #4]
 800194a:	2400      	movs	r4, #0
 800194c:	9400      	str	r4, [sp, #0]
 800194e:	4623      	mov	r3, r4
 8001950:	2280      	movs	r2, #128	; 0x80
 8001952:	4915      	ldr	r1, [pc, #84]	; (80019a8 <vTaskStartScheduler+0x64>)
 8001954:	4815      	ldr	r0, [pc, #84]	; (80019ac <vTaskStartScheduler+0x68>)
 8001956:	f7ff ff25 	bl	80017a4 <xTaskCreate>
	if( xReturn == pdPASS )
 800195a:	2801      	cmp	r0, #1
 800195c:	d114      	bne.n	8001988 <vTaskStartScheduler+0x44>
 800195e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001962:	f383 8811 	msr	BASEPRI, r3
 8001966:	f3bf 8f6f 	isb	sy
 800196a:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <vTaskStartScheduler+0x6c>)
 8001970:	f04f 32ff 	mov.w	r2, #4294967295
 8001974:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <vTaskStartScheduler+0x70>)
 8001978:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <vTaskStartScheduler+0x74>)
 800197c:	601c      	str	r4, [r3, #0]
}
 800197e:	b002      	add	sp, #8
 8001980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8001984:	f7ff be40 	b.w	8001608 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001988:	3001      	adds	r0, #1
 800198a:	d108      	bne.n	800199e <vTaskStartScheduler+0x5a>
 800198c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001990:	f383 8811 	msr	BASEPRI, r3
 8001994:	f3bf 8f6f 	isb	sy
 8001998:	f3bf 8f4f 	dsb	sy
 800199c:	e7fe      	b.n	800199c <vTaskStartScheduler+0x58>
}
 800199e:	b002      	add	sp, #8
 80019a0:	bd10      	pop	{r4, pc}
 80019a2:	bf00      	nop
 80019a4:	20003d1c 	.word	0x20003d1c
 80019a8:	08002300 	.word	0x08002300
 80019ac:	08001c29 	.word	0x08001c29
 80019b0:	20003d20 	.word	0x20003d20
 80019b4:	20003d3c 	.word	0x20003d3c
 80019b8:	20003d68 	.word	0x20003d68

080019bc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80019bc:	4a02      	ldr	r2, [pc, #8]	; (80019c8 <vTaskSuspendAll+0xc>)
 80019be:	6813      	ldr	r3, [r2, #0]
 80019c0:	3301      	adds	r3, #1
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20003ce8 	.word	0x20003ce8

080019cc <xTaskIncrementTick>:
{
 80019cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019d0:	4b3c      	ldr	r3, [pc, #240]	; (8001ac4 <xTaskIncrementTick+0xf8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d153      	bne.n	8001a80 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 80019d8:	4b3b      	ldr	r3, [pc, #236]	; (8001ac8 <xTaskIncrementTick+0xfc>)
 80019da:	681c      	ldr	r4, [r3, #0]
 80019dc:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80019de:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 80019e0:	b9bc      	cbnz	r4, 8001a12 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80019e2:	4b3a      	ldr	r3, [pc, #232]	; (8001acc <xTaskIncrementTick+0x100>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	b142      	cbz	r2, 80019fc <xTaskIncrementTick+0x30>
 80019ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ee:	f383 8811 	msr	BASEPRI, r3
 80019f2:	f3bf 8f6f 	isb	sy
 80019f6:	f3bf 8f4f 	dsb	sy
 80019fa:	e7fe      	b.n	80019fa <xTaskIncrementTick+0x2e>
 80019fc:	4a34      	ldr	r2, [pc, #208]	; (8001ad0 <xTaskIncrementTick+0x104>)
 80019fe:	6819      	ldr	r1, [r3, #0]
 8001a00:	6810      	ldr	r0, [r2, #0]
 8001a02:	6018      	str	r0, [r3, #0]
 8001a04:	6011      	str	r1, [r2, #0]
 8001a06:	4a33      	ldr	r2, [pc, #204]	; (8001ad4 <xTaskIncrementTick+0x108>)
 8001a08:	6813      	ldr	r3, [r2, #0]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	f7ff fe71 	bl	80016f4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001a12:	4d31      	ldr	r5, [pc, #196]	; (8001ad8 <xTaskIncrementTick+0x10c>)
 8001a14:	4f31      	ldr	r7, [pc, #196]	; (8001adc <xTaskIncrementTick+0x110>)
 8001a16:	682b      	ldr	r3, [r5, #0]
 8001a18:	429c      	cmp	r4, r3
 8001a1a:	f04f 0b00 	mov.w	fp, #0
 8001a1e:	d33e      	bcc.n	8001a9e <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a20:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001acc <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8001a24:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8001aec <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a28:	f8d8 2000 	ldr.w	r2, [r8]
 8001a2c:	6812      	ldr	r2, [r2, #0]
 8001a2e:	bb72      	cbnz	r2, 8001a8e <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a30:	f04f 32ff 	mov.w	r2, #4294967295
 8001a34:	602a      	str	r2, [r5, #0]
					break;
 8001a36:	e032      	b.n	8001a9e <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a38:	f106 0a04 	add.w	sl, r6, #4
 8001a3c:	4650      	mov	r0, sl
 8001a3e:	f7ff fce0 	bl	8001402 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001a42:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8001a44:	b119      	cbz	r1, 8001a4e <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a46:	f106 0018 	add.w	r0, r6, #24
 8001a4a:	f7ff fcda 	bl	8001402 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001a4e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001a50:	f8d9 3000 	ldr.w	r3, [r9]
 8001a54:	2201      	movs	r2, #1
 8001a56:	fa02 f100 	lsl.w	r1, r2, r0
 8001a5a:	4319      	orrs	r1, r3
 8001a5c:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <xTaskIncrementTick+0x114>)
 8001a5e:	f8c9 1000 	str.w	r1, [r9]
 8001a62:	f04f 0e14 	mov.w	lr, #20
 8001a66:	4651      	mov	r1, sl
 8001a68:	fb0e 3000 	mla	r0, lr, r0, r3
 8001a6c:	f7ff fca6 	bl	80013bc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a70:	6838      	ldr	r0, [r7, #0]
 8001a72:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8001a74:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8001a76:	4291      	cmp	r1, r2
 8001a78:	bf28      	it	cs
 8001a7a:	f04f 0b01 	movcs.w	fp, #1
 8001a7e:	e7d3      	b.n	8001a28 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8001a80:	4a18      	ldr	r2, [pc, #96]	; (8001ae4 <xTaskIncrementTick+0x118>)
 8001a82:	6813      	ldr	r3, [r2, #0]
 8001a84:	3301      	adds	r3, #1
 8001a86:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8001a88:	f04f 0b00 	mov.w	fp, #0
 8001a8c:	e011      	b.n	8001ab2 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001a8e:	f8d8 2000 	ldr.w	r2, [r8]
 8001a92:	68d2      	ldr	r2, [r2, #12]
 8001a94:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001a96:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8001a98:	428c      	cmp	r4, r1
 8001a9a:	d2cd      	bcs.n	8001a38 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8001a9c:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <xTaskIncrementTick+0x114>)
 8001aa2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001aa4:	2214      	movs	r2, #20
 8001aa6:	434a      	muls	r2, r1
 8001aa8:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8001aaa:	2a02      	cmp	r2, #2
 8001aac:	bf28      	it	cs
 8001aae:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8001ab2:	4a0d      	ldr	r2, [pc, #52]	; (8001ae8 <xTaskIncrementTick+0x11c>)
 8001ab4:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8001ab6:	2a00      	cmp	r2, #0
 8001ab8:	bf18      	it	ne
 8001aba:	f04f 0b01 	movne.w	fp, #1
}
 8001abe:	4658      	mov	r0, fp
 8001ac0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ac4:	20003ce8 	.word	0x20003ce8
 8001ac8:	20003d68 	.word	0x20003d68
 8001acc:	20003c48 	.word	0x20003c48
 8001ad0:	20003c4c 	.word	0x20003c4c
 8001ad4:	20003d24 	.word	0x20003d24
 8001ad8:	20003d20 	.word	0x20003d20
 8001adc:	20003c44 	.word	0x20003c44
 8001ae0:	20003c50 	.word	0x20003c50
 8001ae4:	20003ce4 	.word	0x20003ce4
 8001ae8:	20003d6c 	.word	0x20003d6c
 8001aec:	20003cf0 	.word	0x20003cf0

08001af0 <xTaskResumeAll>:
{
 8001af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8001af4:	4c31      	ldr	r4, [pc, #196]	; (8001bbc <xTaskResumeAll+0xcc>)
 8001af6:	6823      	ldr	r3, [r4, #0]
 8001af8:	b943      	cbnz	r3, 8001b0c <xTaskResumeAll+0x1c>
 8001afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001afe:	f383 8811 	msr	BASEPRI, r3
 8001b02:	f3bf 8f6f 	isb	sy
 8001b06:	f3bf 8f4f 	dsb	sy
 8001b0a:	e7fe      	b.n	8001b0a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8001b0c:	f7ff fcea 	bl	80014e4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001b10:	6823      	ldr	r3, [r4, #0]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b16:	6824      	ldr	r4, [r4, #0]
 8001b18:	b12c      	cbz	r4, 8001b26 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8001b1a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001b1c:	f7ff fd04 	bl	8001528 <vPortExitCritical>
}
 8001b20:	4620      	mov	r0, r4
 8001b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001b26:	4b26      	ldr	r3, [pc, #152]	; (8001bc0 <xTaskResumeAll+0xd0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f5      	beq.n	8001b1a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b2e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001bd8 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8001b32:	4f24      	ldr	r7, [pc, #144]	; (8001bc4 <xTaskResumeAll+0xd4>)
 8001b34:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001bdc <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b38:	f8d9 3000 	ldr.w	r3, [r9]
 8001b3c:	b9e3      	cbnz	r3, 8001b78 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8001b3e:	b10c      	cbz	r4, 8001b44 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8001b40:	f7ff fdd8 	bl	80016f4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001b44:	4d20      	ldr	r5, [pc, #128]	; (8001bc8 <xTaskResumeAll+0xd8>)
 8001b46:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001b48:	b144      	cbz	r4, 8001b5c <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8001b4a:	4e20      	ldr	r6, [pc, #128]	; (8001bcc <xTaskResumeAll+0xdc>)
 8001b4c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8001b4e:	f7ff ff3d 	bl	80019cc <xTaskIncrementTick>
 8001b52:	b100      	cbz	r0, 8001b56 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8001b54:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001b56:	3c01      	subs	r4, #1
 8001b58:	d1f9      	bne.n	8001b4e <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8001b5a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <xTaskResumeAll+0xdc>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0da      	beq.n	8001b1a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8001b64:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <xTaskResumeAll+0xe0>)
 8001b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	f3bf 8f4f 	dsb	sy
 8001b70:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001b74:	2401      	movs	r4, #1
 8001b76:	e7d1      	b.n	8001b1c <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001b78:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8001b7c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b7e:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b80:	f104 0018 	add.w	r0, r4, #24
 8001b84:	f7ff fc3d 	bl	8001402 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b88:	4630      	mov	r0, r6
 8001b8a:	f7ff fc3a 	bl	8001402 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001b8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b90:	6839      	ldr	r1, [r7, #0]
 8001b92:	2501      	movs	r5, #1
 8001b94:	fa05 f302 	lsl.w	r3, r5, r2
 8001b98:	2014      	movs	r0, #20
 8001b9a:	430b      	orrs	r3, r1
 8001b9c:	fb00 8002 	mla	r0, r0, r2, r8
 8001ba0:	4631      	mov	r1, r6
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	f7ff fc0a 	bl	80013bc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <xTaskResumeAll+0xe4>)
 8001baa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8001bb2:	bf24      	itt	cs
 8001bb4:	4b05      	ldrcs	r3, [pc, #20]	; (8001bcc <xTaskResumeAll+0xdc>)
 8001bb6:	601d      	strcs	r5, [r3, #0]
 8001bb8:	e7be      	b.n	8001b38 <xTaskResumeAll+0x48>
 8001bba:	bf00      	nop
 8001bbc:	20003ce8 	.word	0x20003ce8
 8001bc0:	20003cdc 	.word	0x20003cdc
 8001bc4:	20003cf0 	.word	0x20003cf0
 8001bc8:	20003ce4 	.word	0x20003ce4
 8001bcc:	20003d6c 	.word	0x20003d6c
 8001bd0:	e000ed04 	.word	0xe000ed04
 8001bd4:	20003c44 	.word	0x20003c44
 8001bd8:	20003d28 	.word	0x20003d28
 8001bdc:	20003c50 	.word	0x20003c50

08001be0 <vTaskDelay>:
	{
 8001be0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001be2:	b940      	cbnz	r0, 8001bf6 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8001be4:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <vTaskDelay+0x40>)
 8001be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	f3bf 8f4f 	dsb	sy
 8001bf0:	f3bf 8f6f 	isb	sy
 8001bf4:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <vTaskDelay+0x44>)
 8001bf8:	6819      	ldr	r1, [r3, #0]
 8001bfa:	b141      	cbz	r1, 8001c0e <vTaskDelay+0x2e>
 8001bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c00:	f383 8811 	msr	BASEPRI, r3
 8001c04:	f3bf 8f6f 	isb	sy
 8001c08:	f3bf 8f4f 	dsb	sy
 8001c0c:	e7fe      	b.n	8001c0c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001c0e:	f7ff fed5 	bl	80019bc <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001c12:	f7ff fd81 	bl	8001718 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8001c16:	f7ff ff6b 	bl	8001af0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8001c1a:	2800      	cmp	r0, #0
 8001c1c:	d0e2      	beq.n	8001be4 <vTaskDelay+0x4>
 8001c1e:	bd08      	pop	{r3, pc}
 8001c20:	e000ed04 	.word	0xe000ed04
 8001c24:	20003ce8 	.word	0x20003ce8

08001c28 <prvIdleTask>:
{
 8001c28:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001c2a:	4e17      	ldr	r6, [pc, #92]	; (8001c88 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c2c:	4c17      	ldr	r4, [pc, #92]	; (8001c8c <prvIdleTask+0x64>)
 8001c2e:	6823      	ldr	r3, [r4, #0]
 8001c30:	b963      	cbnz	r3, 8001c4c <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001c32:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <prvIdleTask+0x68>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d9f8      	bls.n	8001c2c <prvIdleTask+0x4>
				taskYIELD();
 8001c3a:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <prvIdleTask+0x6c>)
 8001c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	f3bf 8f4f 	dsb	sy
 8001c46:	f3bf 8f6f 	isb	sy
 8001c4a:	e7ef      	b.n	8001c2c <prvIdleTask+0x4>
			vTaskSuspendAll();
 8001c4c:	f7ff feb6 	bl	80019bc <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001c50:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8001c52:	f7ff ff4d 	bl	8001af0 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8001c56:	2d00      	cmp	r5, #0
 8001c58:	d0e9      	beq.n	8001c2e <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8001c5a:	f7ff fc43 	bl	80014e4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001c5e:	68f3      	ldr	r3, [r6, #12]
 8001c60:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c62:	1d28      	adds	r0, r5, #4
 8001c64:	f7ff fbcd 	bl	8001402 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8001c68:	4a0b      	ldr	r2, [pc, #44]	; (8001c98 <prvIdleTask+0x70>)
 8001c6a:	6813      	ldr	r3, [r2, #0]
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8001c70:	6823      	ldr	r3, [r4, #0]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8001c76:	f7ff fc57 	bl	8001528 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8001c7a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001c7c:	f7ff fb58 	bl	8001330 <vPortFree>
			vPortFree( pxTCB );
 8001c80:	4628      	mov	r0, r5
 8001c82:	f7ff fb55 	bl	8001330 <vPortFree>
 8001c86:	e7d2      	b.n	8001c2e <prvIdleTask+0x6>
 8001c88:	20003d54 	.word	0x20003d54
 8001c8c:	20003ce0 	.word	0x20003ce0
 8001c90:	20003c50 	.word	0x20003c50
 8001c94:	e000ed04 	.word	0xe000ed04
 8001c98:	20003cdc 	.word	0x20003cdc

08001c9c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001c9c:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <vTaskSwitchContext+0x60>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <vTaskSwitchContext+0x64>)
{
 8001ca2:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001ca4:	b112      	cbz	r2, 8001cac <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8001ca6:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8001cac:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <vTaskSwitchContext+0x68>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001cb2:	fab3 f383 	clz	r3, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	f1c3 031f 	rsb	r3, r3, #31
 8001cbc:	2214      	movs	r2, #20
 8001cbe:	4912      	ldr	r1, [pc, #72]	; (8001d08 <vTaskSwitchContext+0x6c>)
 8001cc0:	435a      	muls	r2, r3
 8001cc2:	1888      	adds	r0, r1, r2
 8001cc4:	588c      	ldr	r4, [r1, r2]
 8001cc6:	b944      	cbnz	r4, 8001cda <vTaskSwitchContext+0x3e>
	__asm volatile
 8001cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ccc:	f383 8811 	msr	BASEPRI, r3
 8001cd0:	f3bf 8f6f 	isb	sy
 8001cd4:	f3bf 8f4f 	dsb	sy
 8001cd8:	e7fe      	b.n	8001cd8 <vTaskSwitchContext+0x3c>
 8001cda:	6844      	ldr	r4, [r0, #4]
 8001cdc:	3208      	adds	r2, #8
 8001cde:	6864      	ldr	r4, [r4, #4]
 8001ce0:	6044      	str	r4, [r0, #4]
 8001ce2:	440a      	add	r2, r1
 8001ce4:	4294      	cmp	r4, r2
 8001ce6:	bf04      	itt	eq
 8001ce8:	6862      	ldreq	r2, [r4, #4]
 8001cea:	6042      	streq	r2, [r0, #4]
 8001cec:	2214      	movs	r2, #20
 8001cee:	fb02 1303 	mla	r3, r2, r3, r1
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <vTaskSwitchContext+0x70>)
 8001cf8:	e7d6      	b.n	8001ca8 <vTaskSwitchContext+0xc>
 8001cfa:	bf00      	nop
 8001cfc:	20003ce8 	.word	0x20003ce8
 8001d00:	20003d6c 	.word	0x20003d6c
 8001d04:	20003cf0 	.word	0x20003cf0
 8001d08:	20003c50 	.word	0x20003c50
 8001d0c:	20003c44 	.word	0x20003c44

08001d10 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <xTaskGetSchedulerState+0x18>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	b133      	cbz	r3, 8001d24 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d16:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <xTaskGetSchedulerState+0x1c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8001d1c:	bf0c      	ite	eq
 8001d1e:	2002      	moveq	r0, #2
 8001d20:	2000      	movne	r0, #0
 8001d22:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001d24:	2001      	movs	r0, #1
	}
 8001d26:	4770      	bx	lr
 8001d28:	20003d3c 	.word	0x20003d3c
 8001d2c:	20003ce8 	.word	0x20003ce8

08001d30 <StartDefaultTask>:
  /* USER CODE END RTOS_QUEUES */
}

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8001d30:	b508      	push	{r3, lr}

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d32:	2001      	movs	r0, #1
 8001d34:	f7ff fa37 	bl	80011a6 <osDelay>
 8001d38:	e7fb      	b.n	8001d32 <StartDefaultTask+0x2>
	...

08001d3c <StartTask02>:
}


/* StartTask02 function */
void StartTask02(void const * argument)
{
 8001d3c:	b538      	push	{r3, r4, r5, lr}

    if(toogle)
    	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0, GPIO_PIN_SET);

    else
    	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0, GPIO_PIN_RESET);
 8001d3e:	4d08      	ldr	r5, [pc, #32]	; (8001d60 <StartTask02+0x24>)
  bool toogle = false;
 8001d40:	2400      	movs	r4, #0
    if(toogle)
 8001d42:	f094 0401 	eors.w	r4, r4, #1
    	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0, GPIO_PIN_RESET);
 8001d46:	4628      	mov	r0, r5
    	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0, GPIO_PIN_SET);
 8001d48:	bf14      	ite	ne
 8001d4a:	2201      	movne	r2, #1
    	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0, GPIO_PIN_RESET);
 8001d4c:	4622      	moveq	r2, r4
 8001d4e:	2101      	movs	r1, #1
 8001d50:	f7fe fbb8 	bl	80004c4 <HAL_GPIO_WritePin>
    osDelay(1000);
 8001d54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d58:	f7ff fa25 	bl	80011a6 <osDelay>
    toogle=!toogle;
 8001d5c:	e7f1      	b.n	8001d42 <StartTask02+0x6>
 8001d5e:	bf00      	nop
 8001d60:	40020400 	.word	0x40020400

08001d64 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8001d64:	b570      	push	{r4, r5, r6, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001d66:	4c0e      	ldr	r4, [pc, #56]	; (8001da0 <MX_FREERTOS_Init+0x3c>)
 8001d68:	4626      	mov	r6, r4
 8001d6a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
void MX_FREERTOS_Init(void) {
 8001d6c:	b08a      	sub	sp, #40	; 0x28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001d6e:	466d      	mov	r5, sp
 8001d70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d72:	6833      	ldr	r3, [r6, #0]
 8001d74:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001d76:	2100      	movs	r1, #0
 8001d78:	4668      	mov	r0, sp
 8001d7a:	f7ff f9fc 	bl	8001176 <osThreadCreate>
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <MX_FREERTOS_Init+0x40>)
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 8001d80:	3414      	adds	r4, #20
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001d82:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 8001d84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d86:	ad05      	add	r5, sp, #20
 8001d88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d8a:	6823      	ldr	r3, [r4, #0]
 8001d8c:	602b      	str	r3, [r5, #0]
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8001d8e:	2100      	movs	r1, #0
 8001d90:	a805      	add	r0, sp, #20
 8001d92:	f7ff f9f0 	bl	8001176 <osThreadCreate>
 8001d96:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <MX_FREERTOS_Init+0x44>)
 8001d98:	6018      	str	r0, [r3, #0]
}
 8001d9a:	b00a      	add	sp, #40	; 0x28
 8001d9c:	bd70      	pop	{r4, r5, r6, pc}
 8001d9e:	bf00      	nop
 8001da0:	080022d8 	.word	0x080022d8
 8001da4:	20003d74 	.word	0x20003d74
 8001da8:	20003d78 	.word	0x20003d78

08001dac <MX_GPIO_Init>:
        * the Code Generation settings)
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8001dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001db0:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db2:	2400      	movs	r4, #0
 8001db4:	4b49      	ldr	r3, [pc, #292]	; (8001edc <MX_GPIO_Init+0x130>)
 8001db6:	9400      	str	r4, [sp, #0]
 8001db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001dba:	4e49      	ldr	r6, [pc, #292]	; (8001ee0 <MX_GPIO_Init+0x134>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001dbc:	4f49      	ldr	r7, [pc, #292]	; (8001ee4 <MX_GPIO_Init+0x138>)

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001dbe:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8001ef0 <MX_GPIO_Init+0x144>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc2:	f042 0204 	orr.w	r2, r2, #4
 8001dc6:	631a      	str	r2, [r3, #48]	; 0x30
 8001dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dca:	f002 0204 	and.w	r2, r2, #4
 8001dce:	9200      	str	r2, [sp, #0]
 8001dd0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dd2:	9401      	str	r4, [sp, #4]
 8001dd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dda:	631a      	str	r2, [r3, #48]	; 0x30
 8001ddc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dde:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001de2:	9201      	str	r2, [sp, #4]
 8001de4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de6:	9402      	str	r4, [sp, #8]
 8001de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dea:	f042 0201 	orr.w	r2, r2, #1
 8001dee:	631a      	str	r2, [r3, #48]	; 0x30
 8001df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001df2:	f002 0201 	and.w	r2, r2, #1
 8001df6:	9202      	str	r2, [sp, #8]
 8001df8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfa:	9403      	str	r4, [sp, #12]
 8001dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dfe:	f042 0202 	orr.w	r2, r2, #2
 8001e02:	631a      	str	r2, [r3, #48]	; 0x30
 8001e04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e06:	f002 0202 	and.w	r2, r2, #2
 8001e0a:	9203      	str	r2, [sp, #12]
 8001e0c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e0e:	9404      	str	r4, [sp, #16]
 8001e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e12:	f042 0208 	orr.w	r2, r2, #8
 8001e16:	631a      	str	r2, [r3, #48]	; 0x30
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e20:	4622      	mov	r2, r4
 8001e22:	4630      	mov	r0, r6
 8001e24:	2120      	movs	r1, #32
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e26:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e28:	f7fe fb4c 	bl	80004c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001e2c:	4622      	mov	r2, r4
 8001e2e:	4638      	mov	r0, r7
 8001e30:	2101      	movs	r1, #1
 8001e32:	f7fe fb47 	bl	80004c4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001e36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e3a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e3c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <MX_GPIO_Init+0x13c>)
 8001e40:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e42:	4640      	mov	r0, r8
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e44:	2503      	movs	r5, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e48:	f7fe fa66 	bl	8000318 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001e4c:	f641 73ff 	movw	r3, #8191	; 0x1fff
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e50:	a905      	add	r1, sp, #20
 8001e52:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001e54:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e56:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e5a:	f7fe fa5d 	bl	8000318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6 
                           PA7 PA8 PA11 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6 
 8001e5e:	f649 13d3 	movw	r3, #39379	; 0x99d3
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e62:	a905      	add	r1, sp, #20
 8001e64:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6 
 8001e66:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e68:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6c:	f7fe fa54 	bl	8000318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e70:	230c      	movs	r3, #12
 8001e72:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e74:	2302      	movs	r3, #2
 8001e76:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e78:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e7a:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7c:	4630      	mov	r0, r6

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7e:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e82:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e88:	f7fe fa46 	bl	8000318 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e8c:	2320      	movs	r3, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e8e:	a905      	add	r1, sp, #20
 8001e90:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e92:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e94:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e9c:	f7fe fa3c 	bl	8000318 <HAL_GPIO_Init>
  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea0:	a905      	add	r1, sp, #20
 8001ea2:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ea4:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea8:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eae:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb0:	f7fe fa32 	bl	8000318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB12 
                           PB13 PB14 PB15 PB4 
                           PB5 PB6 PB7 PB8 
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12 
 8001eb4:	f24f 73f6 	movw	r3, #63478	; 0xf7f6
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb8:	a905      	add	r1, sp, #20
 8001eba:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12 
 8001ebc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ebe:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec2:	f7fe fa29 	bl	8000318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ec6:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ec8:	a905      	add	r1, sp, #20
 8001eca:	4808      	ldr	r0, [pc, #32]	; (8001eec <MX_GPIO_Init+0x140>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ecc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ece:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed2:	f7fe fa21 	bl	8000318 <HAL_GPIO_Init>

}
 8001ed6:	b00a      	add	sp, #40	; 0x28
 8001ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020000 	.word	0x40020000
 8001ee4:	40020400 	.word	0x40020400
 8001ee8:	10210000 	.word	0x10210000
 8001eec:	40020c00 	.word	0x40020c00
 8001ef0:	40020800 	.word	0x40020800

08001ef4 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001ef4:	b570      	push	{r4, r5, r6, lr}
 8001ef6:	b098      	sub	sp, #96	; 0x60
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef8:	2200      	movs	r2, #0
 8001efa:	4b2d      	ldr	r3, [pc, #180]	; (8001fb0 <SystemClock_Config+0xbc>)
 8001efc:	9200      	str	r2, [sp, #0]
 8001efe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001f00:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001f04:	6419      	str	r1, [r3, #64]	; 0x40
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f08:	492a      	ldr	r1, [pc, #168]	; (8001fb4 <SystemClock_Config+0xc0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f12:	9201      	str	r2, [sp, #4]
 8001f14:	680b      	ldr	r3, [r1, #0]
 8001f16:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f1e:	600b      	str	r3, [r1, #0]
 8001f20:	680b      	ldr	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f22:	9213      	str	r2, [sp, #76]	; 0x4c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f28:	9301      	str	r3, [sp, #4]
 8001f2a:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001f2c:	230a      	movs	r3, #10
 8001f2e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001f30:	2310      	movs	r3, #16
 8001f32:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001f34:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001f36:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f3a:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f3c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001f3e:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001f40:	2604      	movs	r6, #4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f42:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f44:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f46:	910f      	str	r1, [sp, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f48:	9111      	str	r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f4a:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001f4c:	9616      	str	r6, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f4e:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f50:	f7fe faca 	bl	80004e8 <HAL_RCC_OscConfig>
 8001f54:	b100      	cbz	r0, 8001f58 <SystemClock_Config+0x64>
 8001f56:	e7fe      	b.n	8001f56 <SystemClock_Config+0x62>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f58:	250f      	movs	r5, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f5a:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f60:	9006      	str	r0, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f62:	4621      	mov	r1, r4
 8001f64:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f66:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f68:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f6a:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f6c:	f7fe fc8a 	bl	8000884 <HAL_RCC_ClockConfig>
 8001f70:	b100      	cbz	r0, 8001f74 <SystemClock_Config+0x80>
 8001f72:	e7fe      	b.n	8001f72 <SystemClock_Config+0x7e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001f74:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f78:	a807      	add	r0, sp, #28
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f7a:	9407      	str	r4, [sp, #28]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001f7c:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f7e:	f7fe fd8b 	bl	8000a98 <HAL_RCCEx_PeriphCLKConfig>
 8001f82:	4604      	mov	r4, r0
 8001f84:	b100      	cbz	r0, 8001f88 <SystemClock_Config+0x94>
 8001f86:	e7fe      	b.n	8001f86 <SystemClock_Config+0x92>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001f88:	f7fe fd32 	bl	80009f0 <HAL_RCC_GetHCLKFreq>
 8001f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f90:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f94:	f7fe f99e 	bl	80002d4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001f98:	4630      	mov	r0, r6
 8001f9a:	f7fe f9b1 	bl	8000300 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001f9e:	4622      	mov	r2, r4
 8001fa0:	4629      	mov	r1, r5
 8001fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa6:	f7fe f955 	bl	8000254 <HAL_NVIC_SetPriority>
}
 8001faa:	b018      	add	sp, #96	; 0x60
 8001fac:	bd70      	pop	{r4, r5, r6, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40007000 	.word	0x40007000

08001fb8 <main>:
{
 8001fb8:	b508      	push	{r3, lr}
  HAL_Init();
 8001fba:	f7fe f911 	bl	80001e0 <HAL_Init>
  SystemClock_Config();
 8001fbe:	f7ff ff99 	bl	8001ef4 <SystemClock_Config>
  MX_GPIO_Init();
 8001fc2:	f7ff fef3 	bl	8001dac <MX_GPIO_Init>
  MX_RTC_Init();
 8001fc6:	f000 f81b 	bl	8002000 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001fca:	f000 f8e1 	bl	8002190 <MX_USART1_UART_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2105      	movs	r1, #5
 8001fd2:	2028      	movs	r0, #40	; 0x28
 8001fd4:	f7fe f93e 	bl	8000254 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001fd8:	2028      	movs	r0, #40	; 0x28
 8001fda:	f7fe f96f 	bl	80002bc <HAL_NVIC_EnableIRQ>
  MX_FREERTOS_Init();
 8001fde:	f7ff fec1 	bl	8001d64 <MX_FREERTOS_Init>
  osKernelStart();
 8001fe2:	f7ff f8c3 	bl	800116c <osKernelStart>
 8001fe6:	e7fe      	b.n	8001fe6 <main+0x2e>

08001fe8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001fe8:	6802      	ldr	r2, [r0, #0]
 8001fea:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d101      	bne.n	8001ff4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001ff0:	f7fe b910 	b.w	8000214 <HAL_IncTick>
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40010000 	.word	0x40010000

08001ffc <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8001ffc:	e7fe      	b.n	8001ffc <_Error_Handler>
	...

08002000 <MX_RTC_Init>:
void MX_RTC_Init(void)
{

    /**Initialize RTC Only 
    */
  hrtc.Instance = RTC;
 8002000:	480b      	ldr	r0, [pc, #44]	; (8002030 <MX_RTC_Init+0x30>)
{
 8002002:	b508      	push	{r3, lr}
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 8002004:	227f      	movs	r2, #127	; 0x7f
  hrtc.Instance = RTC;
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <MX_RTC_Init+0x34>)
 8002008:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = 127;
 800200a:	6082      	str	r2, [r0, #8]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800200c:	2300      	movs	r3, #0
  hrtc.Init.SynchPrediv = 255;
 800200e:	22ff      	movs	r2, #255	; 0xff
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002010:	6043      	str	r3, [r0, #4]
  hrtc.Init.SynchPrediv = 255;
 8002012:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002014:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002016:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002018:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800201a:	f7fe fe03 	bl	8000c24 <HAL_RTC_Init>
 800201e:	b128      	cbz	r0, 800202c <MX_RTC_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002020:	214a      	movs	r1, #74	; 0x4a
 8002022:	4805      	ldr	r0, [pc, #20]	; (8002038 <MX_RTC_Init+0x38>)
  }

}
 8002024:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002028:	f7ff bfe8 	b.w	8001ffc <_Error_Handler>
 800202c:	bd08      	pop	{r3, pc}
 800202e:	bf00      	nop
 8002030:	20003d7c 	.word	0x20003d7c
 8002034:	40002800 	.word	0x40002800
 8002038:	0800231a 	.word	0x0800231a

0800203c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 800203c:	6802      	ldr	r2, [r0, #0]
 800203e:	4b03      	ldr	r3, [pc, #12]	; (800204c <HAL_RTC_MspInit+0x10>)
 8002040:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002042:	bf02      	ittt	eq
 8002044:	4b02      	ldreq	r3, [pc, #8]	; (8002050 <HAL_RTC_MspInit+0x14>)
 8002046:	2201      	moveq	r2, #1
 8002048:	601a      	streq	r2, [r3, #0]
 800204a:	4770      	bx	lr
 800204c:	40002800 	.word	0x40002800
 8002050:	42470e3c 	.word	0x42470e3c

08002054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002054:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002056:	2003      	movs	r0, #3
 8002058:	f7fe f8ea 	bl	8000230 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800205c:	2200      	movs	r2, #0
 800205e:	4611      	mov	r1, r2
 8002060:	f06f 000b 	mvn.w	r0, #11
 8002064:	f7fe f8f6 	bl	8000254 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002068:	2200      	movs	r2, #0
 800206a:	4611      	mov	r1, r2
 800206c:	f06f 000a 	mvn.w	r0, #10
 8002070:	f7fe f8f0 	bl	8000254 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002074:	2200      	movs	r2, #0
 8002076:	4611      	mov	r1, r2
 8002078:	f06f 0009 	mvn.w	r0, #9
 800207c:	f7fe f8ea 	bl	8000254 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002080:	2200      	movs	r2, #0
 8002082:	4611      	mov	r1, r2
 8002084:	f06f 0004 	mvn.w	r0, #4
 8002088:	f7fe f8e4 	bl	8000254 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800208c:	2200      	movs	r2, #0
 800208e:	4611      	mov	r1, r2
 8002090:	f06f 0003 	mvn.w	r0, #3
 8002094:	f7fe f8de 	bl	8000254 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002098:	2200      	movs	r2, #0
 800209a:	210f      	movs	r1, #15
 800209c:	f06f 0001 	mvn.w	r0, #1
 80020a0:	f7fe f8d8 	bl	8000254 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80020a4:	2200      	movs	r2, #0
 80020a6:	210f      	movs	r1, #15
 80020a8:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80020b0:	f7fe b8d0 	b.w	8000254 <HAL_NVIC_SetPriority>

080020b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b4:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80020b6:	4601      	mov	r1, r0
{
 80020b8:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80020ba:	2200      	movs	r2, #0
 80020bc:	2019      	movs	r0, #25
 80020be:	f7fe f8c9 	bl	8000254 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80020c2:	2019      	movs	r0, #25
 80020c4:	f7fe f8fa 	bl	80002bc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80020c8:	2500      	movs	r5, #0
 80020ca:	4b14      	ldr	r3, [pc, #80]	; (800211c <HAL_InitTick+0x68>)
 80020cc:	9502      	str	r5, [sp, #8]
 80020ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80020d0:	4c13      	ldr	r4, [pc, #76]	; (8002120 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 80020d2:	f042 0201 	orr.w	r2, r2, #1
 80020d6:	645a      	str	r2, [r3, #68]	; 0x44
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020e0:	a901      	add	r1, sp, #4
 80020e2:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 80020e4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020e6:	f7fe fcb9 	bl	8000a5c <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80020ea:	f7fe fc9f 	bl	8000a2c <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 80020ee:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <HAL_InitTick+0x70>)
 80020f0:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80020f2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80020f6:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_InitTick+0x74>)
 80020fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80020fe:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8002100:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002102:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8002104:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002106:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002108:	f7fe fecc 	bl	8000ea4 <HAL_TIM_Base_Init>
 800210c:	b920      	cbnz	r0, 8002118 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800210e:	4620      	mov	r0, r4
 8002110:	f7fe fdcb 	bl	8000caa <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002114:	b009      	add	sp, #36	; 0x24
 8002116:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8002118:	2001      	movs	r0, #1
 800211a:	e7fb      	b.n	8002114 <HAL_InitTick+0x60>
 800211c:	40023800 	.word	0x40023800
 8002120:	20003d9c 	.word	0x20003d9c
 8002124:	40010000 	.word	0x40010000
 8002128:	000f4240 	.word	0x000f4240

0800212c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800212c:	f7ff b843 	b.w	80011b6 <osSystickHandler>

08002130 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002130:	4801      	ldr	r0, [pc, #4]	; (8002138 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8002132:	f7fe bdc9 	b.w	8000cc8 <HAL_TIM_IRQHandler>
 8002136:	bf00      	nop
 8002138:	20003d9c 	.word	0x20003d9c

0800213c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800213c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002140:	f7fe b9c6 	b.w	80004d0 <HAL_GPIO_EXTI_IRQHandler>

08002144 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002144:	490f      	ldr	r1, [pc, #60]	; (8002184 <SystemInit+0x40>)
 8002146:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800214a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002152:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <SystemInit+0x44>)
 8002154:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002156:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002158:	f042 0201 	orr.w	r2, r2, #1
 800215c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800215e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002166:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800216a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800216c:	4a07      	ldr	r2, [pc, #28]	; (800218c <SystemInit+0x48>)
 800216e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002176:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002178:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800217a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800217e:	608b      	str	r3, [r1, #8]
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	e000ed00 	.word	0xe000ed00
 8002188:	40023800 	.word	0x40023800
 800218c:	24003010 	.word	0x24003010

08002190 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002190:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8002192:	480c      	ldr	r0, [pc, #48]	; (80021c4 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <MX_USART1_UART_Init+0x38>)
 8002196:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800219a:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800219e:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021a0:	2300      	movs	r3, #0
 80021a2:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021a4:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021a6:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021a8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021aa:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021ac:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021ae:	f7fe ffaf 	bl	8001110 <HAL_UART_Init>
 80021b2:	b128      	cbz	r0, 80021c0 <MX_USART1_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 80021b4:	214c      	movs	r1, #76	; 0x4c
 80021b6:	4805      	ldr	r0, [pc, #20]	; (80021cc <MX_USART1_UART_Init+0x3c>)
  }

}
 80021b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80021bc:	f7ff bf1e 	b.w	8001ffc <_Error_Handler>
 80021c0:	bd08      	pop	{r3, pc}
 80021c2:	bf00      	nop
 80021c4:	20003dd8 	.word	0x20003dd8
 80021c8:	40011000 	.word	0x40011000
 80021cc:	0800233f 	.word	0x0800233f

080021d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 80021d2:	6802      	ldr	r2, [r0, #0]
 80021d4:	4b10      	ldr	r3, [pc, #64]	; (8002218 <HAL_UART_MspInit+0x48>)
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d11a      	bne.n	8002210 <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	4b0f      	ldr	r3, [pc, #60]	; (800221c <HAL_UART_MspInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e0:	480f      	ldr	r0, [pc, #60]	; (8002220 <HAL_UART_MspInit+0x50>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80021e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021e4:	f042 0210 	orr.w	r2, r2, #16
 80021e8:	645a      	str	r2, [r3, #68]	; 0x44
 80021ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021f4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021f8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021fe:	2301      	movs	r3, #1
 8002200:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002202:	2303      	movs	r3, #3
 8002204:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002206:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002208:	2307      	movs	r3, #7
 800220a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220c:	f7fe f884 	bl	8000318 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002210:	b007      	add	sp, #28
 8002212:	f85d fb04 	ldr.w	pc, [sp], #4
 8002216:	bf00      	nop
 8002218:	40011000 	.word	0x40011000
 800221c:	40023800 	.word	0x40023800
 8002220:	40020000 	.word	0x40020000

08002224 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002224:	f8df d034 	ldr.w	sp, [pc, #52]	; 800225c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002228:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800222a:	e003      	b.n	8002234 <LoopCopyDataInit>

0800222c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800222c:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800222e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002230:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002232:	3104      	adds	r1, #4

08002234 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002234:	480b      	ldr	r0, [pc, #44]	; (8002264 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002236:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002238:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800223a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800223c:	d3f6      	bcc.n	800222c <CopyDataInit>
  ldr  r2, =_sbss
 800223e:	4a0b      	ldr	r2, [pc, #44]	; (800226c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002240:	e002      	b.n	8002248 <LoopFillZerobss>

08002242 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002242:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002244:	f842 3b04 	str.w	r3, [r2], #4

08002248 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800224a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800224c:	d3f9      	bcc.n	8002242 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800224e:	f7ff ff79 	bl	8002144 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002252:	f000 f811 	bl	8002278 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002256:	f7ff feaf 	bl	8001fb8 <main>
  bx  lr    
 800225a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800225c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002260:	08002358 	.word	0x08002358
  ldr  r0, =_sdata
 8002264:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002268:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 800226c:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8002270:	20003e18 	.word	0x20003e18

08002274 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002274:	e7fe      	b.n	8002274 <ADC_IRQHandler>
	...

08002278 <__libc_init_array>:
 8002278:	b570      	push	{r4, r5, r6, lr}
 800227a:	4e0d      	ldr	r6, [pc, #52]	; (80022b0 <__libc_init_array+0x38>)
 800227c:	4c0d      	ldr	r4, [pc, #52]	; (80022b4 <__libc_init_array+0x3c>)
 800227e:	1ba4      	subs	r4, r4, r6
 8002280:	10a4      	asrs	r4, r4, #2
 8002282:	2500      	movs	r5, #0
 8002284:	42a5      	cmp	r5, r4
 8002286:	d109      	bne.n	800229c <__libc_init_array+0x24>
 8002288:	4e0b      	ldr	r6, [pc, #44]	; (80022b8 <__libc_init_array+0x40>)
 800228a:	4c0c      	ldr	r4, [pc, #48]	; (80022bc <__libc_init_array+0x44>)
 800228c:	f000 f818 	bl	80022c0 <_init>
 8002290:	1ba4      	subs	r4, r4, r6
 8002292:	10a4      	asrs	r4, r4, #2
 8002294:	2500      	movs	r5, #0
 8002296:	42a5      	cmp	r5, r4
 8002298:	d105      	bne.n	80022a6 <__libc_init_array+0x2e>
 800229a:	bd70      	pop	{r4, r5, r6, pc}
 800229c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022a0:	4798      	blx	r3
 80022a2:	3501      	adds	r5, #1
 80022a4:	e7ee      	b.n	8002284 <__libc_init_array+0xc>
 80022a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022aa:	4798      	blx	r3
 80022ac:	3501      	adds	r5, #1
 80022ae:	e7f2      	b.n	8002296 <__libc_init_array+0x1e>
 80022b0:	08002350 	.word	0x08002350
 80022b4:	08002350 	.word	0x08002350
 80022b8:	08002350 	.word	0x08002350
 80022bc:	08002354 	.word	0x08002354

080022c0 <_init>:
 80022c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c2:	bf00      	nop
 80022c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022c6:	bc08      	pop	{r3}
 80022c8:	469e      	mov	lr, r3
 80022ca:	4770      	bx	lr

080022cc <_fini>:
 80022cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ce:	bf00      	nop
 80022d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022d2:	bc08      	pop	{r3}
 80022d4:	469e      	mov	lr, r3
 80022d6:	4770      	bx	lr
